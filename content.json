{"meta":{"title":"个人博客","subtitle":null,"description":null,"author":"周凯","url":"http://www.start6.cn","root":"/"},"posts":[{"tags":[{"name":"前端","slug":"前端","permalink":"http://www.start6.cn/tags/%E5%89%8D%E7%AB%AF/"}],"title":"2022年技术胖私藏工具分享","date":"2022/10/25","text":"2022年技术胖私藏工具分享300+编程实用工具 技术胖博客Javascript工具 Underscore.js一套完善的函数式编程的接口，更方便地在JavaScript中实现函数式编程https://underscorejs.org/ fastclick用于消除物理点击和click移动浏览器上事件触发之间的 300 毫秒延迟https://github.com/ftlabs/fastclick Lodash一致性、模块化、高性能的 JavaScript 实用工具库https://lodash.com/ crypto-js加密标准的 JavaScript 库。https://github.com/brix/crypto-js zxcvbnJavaScript密码强度估算库https://github.com/dropbox/zxcvbn zxcvbn-ts支持Typescript的密码强度估算库https://github.com/zxcvbn-ts/zxcvbn clipboard.js将文本复制到剪贴板的轻量级JS 库https://clipboardjs.com/ tesseract.jsJavascript的OCR引擎，在浏览器离线识别图片中的文字https://tesseract.projectnaptha.com/ number-precision小而快的库，用于精确地进行加法、减法、乘法和除法运算https://github.com/nefe/number-precision fingerprintjs具有高准确度和稳定性的浏览器指纹库https://fingerprint.com/ ViteShot基于Vite的快速简单的截图工具。https://viteshot.com/ Valine快速、简洁且高效的无后端评论系统https://valine.js.org/ cnpm淘宝提供的一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步https://npmmirror.com/ yarn快速、可靠和安全的依赖管理https://yarnpkg.com/ responsively-app一种改进的 Web 浏览器，有助于响应式 Web 开发。Web 开发人员必须拥有开发工具https://responsively.app/ javascript-obfuscator功能强大的免费 JavaScript 混淆器，包含多种功能，可为源代码提供保护https://obfuscator.io/ Nano ID小巧的、安全的、URL 友好的、独特的 JavaScript 字符串 唯一 ID 生成器https://zelark.github.io/nano-id-cc/ spy-debugger一站式页面调试、抓包工具。远程调试任何手机浏览器页面，任何手机移动端webview（如：微信，HybridApp等）。支持HTTP/HTTPS，无需USB连接设备https://responsively.app/ fuite用于查找 Web 应用程序中的内存泄漏的工具https://github.com/nolanlawson/fuite qs查询字符串解析和字符串化库https://github.com/ljharb/qs js-cookie用于处理 cookie 的简单、轻量级 JavaScript APIhttps://github.com/js-cookie/js-cookie tinymce排名第一的可定制、可扩展和灵活的富文本编辑器https://www.tiny.cloud/ html2canvas允许在用户浏览器上对网页或其部分进行“截图”https://html2canvas.hertzen.com/ shepherd引导用户浏览您的应用https://shepherdjs.dev/ tinykeys极小的键盘事件监听库https://jamiebuilds.github.io/tinykeys/ ag-grid用于构建企业应用程序的最佳 JavaScript 数据表https://www.ag-grid.com/ tui.calendar功能齐全的 JavaScript 日程表https://ui.toast.com/tui-calendar screenfull用于跨浏览器使用 JavaScript Fullscreen API 的简单包装器https://sindresorhus.com/screenfull/ Fuse.jsJavaScript 中的轻量级模糊搜索https://fusejs.io/ i18next用于浏览器或任何其他 javascript 环境（例如 Node.js、Deno）的国际化框架https://www.i18next.com/ JsBarcode适用于 Web 和 Node.js 的易于使用但功能强大的条形码生成器https://lindell.me/JsBarcode/ path-to-regexp将 /user/:name 等路径字符串转换为正则表达式https://github.com/pillarjs/path-to-regexp await-to-js异步等待包装器，无需 try-catch 即可轻松处理错误https://blog.grossman.io/how-to-write-async-await-without-try-catch-blocks-in-javascript/ md5用 MD5 散列消息的 JavaScript 函数https://github.com/pvorb/node-md5 mitt.js它足够小，仅有200bytes，其次支持全部事件的监听和批量移除，替代EventBushttps://npm.im/mitt js-spark-md5MD5 算法的快速 md5 实现https://github.com/satazor/js-spark-md5 nano小型（130 字节）、安全、URL 友好、唯一的 JavaScript 字符串 ID 生成器https://zelark.github.io/nano-id-cc/ jsPDF用 JavaScript 生成 PDFhttps://parall.ax/products/jspdf ua-parser-js从User-Agen中检测浏览器、引擎、操作系统、CPU 和设备类型/型号，占用空间相对较小（压缩后约 17KB，压缩后约 6KB），支持浏览器和 node.js 环境http://faisalman.github.io/ua-parser-js/ togetherjs网站添加实时协作功能的JavaScript库，两个人可以在同一页面上进行交互，查看彼此的光标、编辑并一起浏览网站https://togetherjs.com/ Clusterize.js开源的长列表渲染库，轻量级的原生大数据量展示https://clusterize.js.org/ crypto-js-wasm加密标准的 javascript 库，比 crypto-js快16 倍https://github.com/originjs/crypto-js-wasm pdfkit用于 Node 和浏览器的 JavaScript PDF 生成库http://pdfkit.org/ zx使用js编写更便捷shell脚本https://www.npmjs.com/package/zx NProgress.js适用于应用程序的进度条，受 Google、YouTube 和 Medium 的启发https://ricostacruz.com/nprogress/可视化 highlight.jsJavaScript 语法高亮器，具有语言自动检测和零依赖项https://highlightjs.org/ Drawflow创建简单的流程库https://jerosoler.github.io/Drawflow/ tui.image-editorHTML5 Canvas 的全功能图像编辑器。它易于使用并提供强大的过滤器https://ui.toast.com/tui-image-editor viewerjsJavaScript 图像查看器https://fengyuanchen.github.io/viewerjs/ prism.js轻量级、健壮、优雅的语法高亮库https://prismjs.com/ fabric.js功能强大且简单的 Canvas库，轻松处理 HTML5 画布元素。是画布元素之上的交互式对象模型，也是一个SVG-to-canvas 解析器http://fabricjs.com/ fullPage.js用于创建全屏滚动网站（也称为单页网站或一页网站），并在该网站的各个部分内添加横向滑块https://alvarotrigo.com/fullPage/ opentype.jsOpenType 和 TrueType 字体解析器和编写器。它允许您从浏览器或 node.js访问文本的字母形式https://opentype.js.org/ icones.js具有即时搜索功能的图标资源管理器，由 Iconify 提供支持https://icones.js.org/ reveal.js创建功能齐全且精美的演示文稿https://revealjs.com/ carbon创建和共享源代码的精美图像https://carbon.now.sh/ lucky-canvas基于 TS + Canvas 开发的【大转盘 / 九宫格 / 老虎机】抽奖插件， 一套源码适配多端框架 JS / Vue / React / Taro / UniApp / 微信小程序等https://100px.net/ Darkmode.js在几秒钟内为您的网站添加暗模式/夜间模式https://darkmodejs.learn.uno/?_360safeparam=8406218 ECharts强大的交互式图表和浏览器数据可视化库https://echarts.apache.org/zh/index.html PixiJS使用最快，最灵活的2D WebGL渲染器创建精美的内容https://pixijs.com/ AntV - G2数据驱动，高度易用，可扩展的可视化图形语法。https://g2plot.antv.vision/zh/ ApexCharts.js基于SVG的JavaScript图表库，可使用简单的API构建交互式图表和可视化文件 OpenLayers高性能，功能丰富的库，用于在Web上创建交互式地图。它可以显示从任何网页上的任何来源加载的地图图块，矢量数据和标记https://openlayers.org/ Two.js面向现代Web浏览器的二维绘图api，渲染不可知实现相同的API在多种环境中得出：svg，canvas，和webglhttps://two.js.org/ Paper.js基于HTML5 Canvas的矢量图形的图形库http://paperjs.org/ Panolens.js事件驱动的基于WebGL的全景查看器。轻巧而灵活。它建立在Three.JS之上https://pchen66.github.io/Panolens/ A-Frame用于构建 3D/AR/VR 体验的 Web 框架https://aframe.io/ mermaid-js以与 Markdown 类似的方式从文本生成图表和流程图https://mermaid-js.github.io/mermaid/ mo · js为网站添加基于JavaScript的动态图形https://mojs.github.io/ trianglifyJavascript 库，用于创建独特的、美观的三角形图案http://qrohlf.com/trianglify/ Babylon.js能强大、美观、简单、开放的游戏和渲染引擎https://www.babylonjs.com/ Oasis Engine高性能 Web 蚂蚁图形引擎https://oasisengine.cn/ Butterfly基于JS的数据驱动的节点式编排组件库https://butterfly-dag.gitee.io/butterfly-dag/home image-optimizer使用 Electron、Vue 和 Vite 用于优化图像和矢量图形的免费开源工具https://github.com/antonreshetov/image-optimizer Sketchfab需任何插件即可在Web页面里嵌入交互式3D模型https://sketchfab.com/ vConsole用于移动网页的轻量级、可扩展的前端开发工具https://github.com/Tencent/vConsole swiper免费且最现代的移动触摸滑块，具有硬件加速过渡和惊人的原生行为https://swiperjs.com/ Slidev面向开发人员的演示幻灯片https://sli.dev/ konvaHTML5 Canvas JavaScript 框架，它支持桌面和移动应用程序的高性能动画、过渡、节点嵌套、分层、过滤、缓存、事件处理等等https://konvajs.org/ p5.j​​s开源的JavaScript可视化库，processing的js实现版本https://p5js.org/zh-Hans/ cesium用于世界级 3D 地球仪和地图的开源 JavaScript 库https://cesium.com/platform/cesiumjs/ driver.js一个轻量级、无依赖的用户引导组件https://kamranahmed.info/driver.js/ vanilla-tilt.js平滑的 3D 倾斜 JavaScript 库https://micku7zu.github.io/vanilla-tilt.js/index.html parallax.js对智能设备的方向引擎响应的视差http://matthew.wagerfield.com/parallax/ signature_pad基于 HTML5 canvas 的平滑签名绘制http://szimek.github.io/signature_pad/ compressorjsJavaScript 图像压缩器https://fengyuanchen.github.io/compressorjs/ eva.js用于创建交互式游戏项目的前端游戏引擎https://eva.js.org/ d3基于数据来操作文档的JavaScript库https://d3js.org/动画插件 countUp.js无依赖项的轻量级Javascript类，可用于快速创建以更有趣的方式显示数字数据的动画https://inorganik.github.io/countUp.js/ impress.jsCSS3 转换和过渡的强大功能的演示框架https://impress.js.org/ Anime.js轻量级的 JavaScript 动画库，具有简单而强大的 APIhttps://animejs.com/ tween.js用于简单动画的 JavaScript 补间引擎，包含优化的 Robert Penner 方程http://tweenjs.github.io/tween.js/ Popmotion制作数字、颜色和复杂字符串的动画。该库的主要动画功能只有5kb左右，整个库的容量在12kb左右https://popmotion.io/ Typed.js打字动画库https://mattboldt.com/demos/typed-js/ vivus.js在 SVG 上制作绘图动画的 JavaScript 库https://maxwellito.github.io/vivus/ ScrollReveal在元素滚入或滚出视口时为其制作动画https://scrollrevealjs.org/ canvas-confetti按需 五彩纸屑https://catdad.github.io/canvas-confetti/ GSAP强大的 JavaScript 工具集，构建适用于所有主流浏览器的高性能动画。动画 CSS、SVG、画布、React、Vue、WebGL、颜色、字符串、运动路径、通用对象https://greensock.com/ lax.js轻量级（&lt;4kb gzipped）香草 JavaScript 库，可在您滚动时创建流畅美观的动画https://github.com/alexfoxy/lax.js animxyzAnimXYZ 可帮助您为您的网站创建、自定义和组合动画https://animxyz.com/ svg.js用于操作和动画 SVG 的轻量级库https://svgjs.dev/docs/3.0/ zdog用于画布和 SVG 的扁平、圆形、设计师友好的伪 3D 引擎https://zzz.dog/ dynamics.js用于创建基于物理的动画的 JavaScript 库http://dynamicsjs.com/ ProtonJavascript粒子动画库https://drawcall.github.io/Proton/文件操作 SheetJS可读取和导出excel的工具库，功能强大，支持格式众多，支持xls、xlsx、ods(一种OpenOffice专有表格文件格式)等十几种格式https://sheetjs.com/ revogrid具有高级定制功能的强大虚拟数据表格https://revolist.github.io/revogrid/ FileSaver.js客户端保存文件的解决方案https://eligrey.com/blog/saving-generated-files-on-the-client-side/ jszip使用 Javascript 创建、读取和编辑 .zip 文件https://stuk.github.io/jszip/ Print.js帮助从网络打印的小型 javascript 库https://printjs.crabbly.com/ mammoth.js将 Word 文档（.docx 文件）转换为 HTMLhttps://github.com/mwilliamson/mammoth.js StreamSaver.js直接异步将流写入文件系统，适合大文件下载https://jimmywarting.github.io/StreamSaver.js/example.html PDF.js使用 HTML5 构建的可移植文档格式 (PDF) 查看器https://github.com/mozilla/pdf.js pdfmake用于服务器端和客户端的 PDF 文档生成库http://pdfmake.org/ pdf-lib在任何 JavaScript 环境中创建和修改 PDF 文档https://pdf-lib.js.org/ uppyJavaScript 文件上传器https://uppy.io/音视频 moovie.js专注于电影的 HTML5 播放器https://mooviejs.com/ meyda.jsJavaScript 音频特征提取库https://meyda.js.org/ howler.jsJavascript 音频库https://howlerjs.com/ flv.jsHTML5 FLV 播放器https://github.com/Bilibili/flv.js/ plyrHTML5、YouTube 和 Vimeo 播放器https://plyr.io/ xgplayer 西瓜播放器网络视频和音频播放器库https://h5player.bytedance.com/ hls.js可在支持 MSE 的浏览器中播放 HLShttps://hls-js.netlify.app/demo/智能化 tensorflow.js用于在浏览器和 Node.js 训练和部署机器学习模型https://tensorflow.google.cn/ face-api.js用于在浏览器和 nodejs 中使用 tensorflow.js 进行人脸检测和人脸识别的 JavaScript APIhttps://github.com/justadudewhohacks/face-api.js/ tracking.js将不同的计算机视觉算法和技术引入浏览器环境。通过使用现代HTML5规范，我们使您能够进行实时颜色跟踪，人脸检测等https://trackingjs.com/ pose-animator识别出人类的表情变化和肢体动作，并将其映射到2D矢量图型上https://github.com/yemount/pose-animator ar-cutpaste手机上预装工具，对着目标物体拍摄，即可将图像复制粘贴进 Photoshophttps://github.com/cyrildiagne/ar-cutpaste imgcook专注以 Sketch、PSD、静态图片等形式的视觉稿作为输入，通过智能化技术一键生成可维护的前端代码https://www.imgcook.com/ nsfwjs帮助快速识别不合时宜的图像https://nsfwjs.com/编辑器 VditorMarkdown 编辑器，支持所见即所得、即时渲染（类似 Typora）和分屏预览模式，由 TypeScript 实现，支持原生 JavaScript、Vue、React、Angular，提供桌面版https://b3log.org/vditor/ monaco-editor为VS Code提供支持的代码编辑器https://microsoft.github.io/monaco-editor/ bytemd用 Svelte 构建的 Markdown 编辑器组件。它也可以用于其他库/框架，例如 React、Vue 和 Angularhttps://bytemd.netlify.app/ wangEditorTypescript 开发的 Web 富文本编辑器， 轻量、简洁、易用、开源免费https://www.wangeditor.com/ mavonEditorMarkdown 编辑器，支持多种个性化功能http://www.mavoneditor.com/ quillAPI 驱动的富文本编辑器https://quilljs.com/ codemirror5浏览器内代码编辑器https://codemirror.net/ marked用于解析 Markdown 的编译器https://marked.js.org/ tiptap完全控制文本编辑器体验。它是可定制的，带有大量扩展，是开源的，并且有大量的文档https://tiptap.dev/2D 3D dat.gui在 JavaScript 中更改变量的轻量级图形用户界面https://github.com/dataarts/dat.gui Three.js易于使用、轻量级、跨浏览器的通用 3D 库https://threejs.org/ Draco 3D缩和解压缩 3D 几何网格和点云。它旨在改进 3D 图形的存储和传输https://google.github.io/draco/ stats.jsJavaScript 性能监视器http://mrdoob.github.io/stats.js/ matter-js一个用于 web 的 JavaScript 2D 物理引擎https://brm.io/matter-js/ Oimo.js用于 javascript 的轻量级 3d 物理引擎，是OimoPhysics的完整 javascript 转换http://lo-th.github.io/Oimo.js/#basic ammo.js使用 Emscripten 将 Bullet 物理引擎直接移植到 JavaScripthttps://github.com/kripken/ammo.js其他常用 Auto.js ProAndroid上支持Node.js的JavaScript自动化和编程软件https://pro.autojs.org/ Inquirer.js实现命令行交互式界面的工具集合https://github.com/SBoudrias/Inquirer.js/ chalk命令行美化工具https://github.com/chalk/chalk Timer.js简单而轻量级的库，无需任何依赖项来创建和管理计时器https://github.com/husa/timer.js day.js极简的 JavaScript 库，它使用与 Moment.js 兼容的 API 为现代浏览器解析、验证、操作和显示日期和时间https://day.js.org/ Socket.io支持基于事件的实时双向通信https://socket.io/ The AlgorithmsGitHub 最大的开源算法库https://the-algorithms.com/ log-symbols各种日志级别的彩色符号https://github.com/sindresorhus/log-symbols plop微型生成器框架，使整个团队可以轻松地创建具有一定一致性的文件https://plopjs.com/ prompts轻量级、美观且用户友好的交互式提示https://github.com/terkelg/prompts shelljs基于 Node.js API 的 Unix shell 命令的可移植（Windows/Linux/macOS）实现https://www.npmjs.com/package/shelljs figlet浏览器控制台个性化输出https://github.com/patorjk/figlet.js picocolors终端修改输出字符样式的 npm 包，比 chalk 体积小 14 倍，速度快 2 倍https://github.com/alexeyraspopov/picocolors cac用于构建 CLI 应用程序的 JavaScript 库，体积数倍小于 commander 和 yargshttps://github.com/cacjs/cac npm-run-all用于并行或顺序运行多个 npm 脚本的 CLI 工具https://github.com/mysticatea/npm-run-all node-semver语义化版本号管理的 npm 库，比如 判断一个版本是否合法，判断版本号命名是否正确，两个版本谁大谁小之类 等https://github.com/npm/node-semver puppeteer在浏览器中手动执行的大多数操作都可以使用 Puppeteer 完成生成页面的屏幕截图和 PDF。抓取 SPA（单页应用程序）并生成预渲染内容自动化表单提交、UI 测试、键盘输入等。https://pptr.dev/ temir用vue组件来编写命令行界面应用的工具https://github.com/webfansplz/temir enquirer适用于 Node.js 的时尚、直观且用户友好的提示https://github.com/enquirer/enquirer跨平台框架 uni-app使用 Vue.js 开发所有前端应用的框架，开发者编写一套代码，可发布到iOS、Android、Web（响应式）、以及各种小程序等13个平台https://uniapp.dcloud.io/ react-native使用 React 构建移动应用程序https://reactnative.dev/ FlutterGoogle 的开源框架，用于构建美观、本机编译的多平台应用程序https://flutter.dev/ chameleon一套代码运行多端，一端所见即多端所见http://cml.didi.cn/ Taro遵循 React 语法规范的多端统一开发框架https://taro.zone/ Electron使用 JavaScript，HTML 和 CSS 构建跨平台的桌面应用程序https://www.electronjs.org/ MicroApp京东零售推出的微前端框架。基于webcomponent-like渲染，从组件思维实现微前端，旨在降低上手难度，提高工作效率https://micro-zoe.github.io/micro-app/ Tauri使用 Web 前端构建更小、更快、更安全的桌面应用程序https://tauri.studio/ Hippy跨平台的开发框架，旨在帮助开发者编写一次，运行在三个平台（iOS、Android 和 Web）上https://hippyjs.org/#/ 无界基于 Web Components + iframe 微前端框架，具备成本低、速度快、原生隔离、功能强等一系列优点。https://wujie-micro.github.io/doc/ qiankun微前端的实现，基于single-spa。它旨在使构建生产就绪的微前端架构系统变得更加容易和轻松。https://qiankun.umijs.org/zhFlutter pub.devDart和Flutter应用程序的官方包存储库https://pub.dev/ awesome-flutter-plugins尽可能收集好用的Flutter插件以便更效率的开发https://github.com/jahnli/awesome-flutter-plugins flutter-widget.live使用 Flutter for web 构建的网站，用于在线实时预览小部件示例。https://flutter-widget.live/basics/introduction google IconsGoogle Material Design 图标https://fonts.google.com/icons Json To Dart ModelJson 转 Dart Model类https://ashamp.github.io/jsonToDartModel/ flutter awesome很棒的列表，其中包含优秀的 Flutter 库和工具https://flutterawesome.com/ LottieFiles免费 Lottie 动画文件、工具和插件https://lottiefiles.com/Electron vue-cli-plugin-electron-builde使用Electron轻松构建用于桌面的Vue.js应用https://nklayman.github.io/vue-cli-plugin-electron-builder/ electron-about-window为Electron 提供 “关于此应用程序” 窗口。https://github.com/rhysd/electron-about-window nativefier使任何网页成为桌面应用程序https://github.com/nativefier/nativefierUniapp Grace UI兼容微信小程序及uni-app的优秀前端框架，以flex布局为基础，提供了丰富的组件及界面库GraceUIhttps://www.graceui.com/ uView全面兼容nvue的uni-app生态框架，全面的组件和便捷的工具https://www.uviewui.com/ ThorUI轻量、简洁、全面的移动端组件库https://thorui.cn/doc/CSS动画 cssfx精美简单的点击复制 CSS 效果https://cssfx.netlify.app/ Twitter HashflagsTwitter 点赞动画https://hashflags.io/ UI SnippetsUI 片段的集合https://ui-snippets.dev/ SpinKitCSS 动画的加载指示器https://tobiasahlin.com/spinkit/ animate.css强大的预设css3动画库https://animate.style/ 犸良一站式动效制作平台，通过海量的动效素材以及可视化编辑能力，帮助零基础的用户轻松完成动效制作https://design.alipay.com/emotion animistaCss 动画https://animista.net/ lordicon功能强大的精心制作的动画图标库https://lordicon.com/ svg-spinners24 x 24 dp的svg格式loading加载器https://github.com/n3r4zzurr0/svg-spinners magic具有炫酷效果的 CSS3 动画https://www.minimamente.com/project/magic/ Hover.cssCSS3 驱动的悬停效果，可应用于链接、按钮、徽标、SVG、特色图像等http://ianlunn.github.io/Hover/ eva-icons超过 480 个制作精美的开源图标。SVG、Sketch、Web 字体和动画支持https://akveo.github.io/eva-icons/#/工具 normalize.cssCSS 重置的现代替代方案http://necolas.github.io/normalize.css/ Squoosh对比 tinypng 有【更好的】压缩效果https://squoosh.app/UI Manypixels收集无版权插图的网站，提供 SVG / PNG 格式下载，并且允许更改颜色https://www.manypixels.co/gallery U钙网免费的LOGO在线设计制作工具https://www.uugai.com/ design-blocks一组 170 多个基于 Bootstrap 的设计块，可用于创建干净的现代网站https://froala.com/design-blocks/ unDraw精美的 SVG 插画集https://undraw.co/illustrations Ira Design通过调配渐变色、搭配手绘组件定制插画https://iradesign.io/gallery/illustrations lukasz adam免费 SVG 插画https://lukaszadam.com/illustrations pixeltrue创建令人叹为观止的项目的插图https://www.pixeltrue.com/packs 3dicons3d图标库https://3dicons.co/ css-buttons100 个现代 CSS 按钮https://css-buttons.web.app/ uiset优质免费的UI设计资源https://uiset.com/ error404404插画页面https://error404.fun/ ui85,745 个精选设计资源，为您的创意工作流程注入活力https://ui8.net/编程工具代码工具 gitignore.io为项目创建有用的 .gitignore 文件https://www.toptal.com/developers/gitignore any-rule常用正则大全, 支持web / vscode / idea / Alfred Workflow多平台https://any86.github.io/any-rule/ 30-seconds-of-code满足多种语言开发需求的简短代码片段https://www.30secondsofcode.org/ github-readme-stats为 github 自述文件动态生成的统计信息https://github.com/anuraghazra/github-readme-stats cz-cli规范提交说明的git工具http://commitizen.github.io/cz-cli/ commitlintgit commit 校验工具https://commitlint.js.org/#/ huskyGit hooks 工具，可以防止使用 Git hooks 的一些不好的 commit 或者 pushhttps://typicode.github.io/husky/#/ lint-staged代码提交之前,进行代码规则检查并尝试修复，能够确保进入git库的代码都是符合代码规则https://github.com/okonet/lint-staged anywhere随启随用的静态文件服务器https://github.com/JacksonTian/anywhere code996统计 Git 项目的 commit 时间分布，进而推导出这个项目的编码工作强度https://hellodigua.github.io/code996/#/图像工具 bigjpg使用度卷积神经网络。它会将噪点和锯齿的部分进行补充，实现图片的无损放大https://bigjpg.com/ jpghd使用人工智能 AI 超分模型和深度学习技术来将低清破损有噪点图片处理成高画质高分辨率图片同时支持破损老照片修复和老照片上色https://jpghd.com/ bigmp4使用智能 AI 模型，能将视频无损高清放大、增强画质、智能补帧使画面丝滑流畅栩栩如生同时支持黑白视频上色和慢动作https://bigmp4.com/ imglarger基于强大的机器学习可在不降低质量的情况下提高图像分辨率https://imglarger.com/ unscreen智能AI去除视频背景在线神器https://www.unscreen.com/ 阿里妈妈创意中心阿里智能文案，智能抠图工具https://chuangyi.taobao.com/文件转换 ALL TO ALL全类型的在线文件转换平台，免费、快速，无须下载安装任何软件https://www.alltoall.net/ Convertio将文件转换成任意格式https://convertio.co/zh/Vue3生态工具1.Web UI库 ElementUI Plus一套为开发者、设计师和产品经理准备的基于 Vue 3.0 的桌面端组件库https://element-plus.org/zh-CN/ Ant Design of VueAnt Design 的 Vue 实现，开发和服务于企业级后台产品https://www.antdv.com/docs/vue/introduce-cn BalmUI基于谷歌的 Material Design，附带 Vue 插件和指令，以及从简单到复杂的高度可定制组件https://next-material.balmjs.com/ Naive UI图森Vue3的组件库，文档完整，我项目中经常使用https://www.naiveui.com/zh-CN/os-theme arco.design字节跳动企业级产品设计系统，支持React和Vue双版本https://arco.design/ Quasar轻松构建高性能和高质量的Vue.js 3用户界面，好用，但没有中文文档https://quasar.dev/ iDUXVue3.x 的 UI 组件库，完全使用 TypeScript 开发https://idux.site/ TDesign腾讯业务团队在服务业务过程中沉淀的一套企业级设计体系https://tdesign.tencent.com/https://tdesign.tencent.com/vue-next/overview PrimeVue易于使用、多功能、高性能的 Vue UI 组件库https://www.primefaces.org/primevue/ DevUI华为基于 Vue3 和 DevUI 设计的 UI 组件https://vue-devui.github.io/ vuestic-uiVue 3 的免费和开源 UI 库 ,UI非常好看，并且有可用后台管理界面。https://vuestic.dev/ Headless UI完全无样式、完全可访问的 UI 组件，旨在与 Tailwind CSS 完美集成。https://headlessui.com/ View UI Plus基于 Vue.js 3 的企业级 UI 组件库和前端解决方案https://www.iviewui.com/2.移动UI库 Vant有赞轻量、可靠的移动端组件库https://vant-contrib.gitee.io/vant/#/zh-CN NutUI京东风格的轻量级移动端 Vue 组件库，非常适合移动端电商使用。https://nutui.jd.com/#/ VarletMaterial 风格移动端组件库 ，文档非常齐全。https://varlet.gitee.io/varlet-ui/#/zh-CN/home nutui-bingo京东基于 NutUI 的抽奖组件库，助力营销活动和小游戏场景。https://nutui.jd.com/bingo/#/3.相关工具 unplugin-vue-componentsantfu 按需组件自动导入，开箱即用地支持 Vue 2 和 Vue 3，Tree-shakable，只注册你使用的组件，附有流行UI 库的内置解析器。https://www.npmjs.com/package/unplugin-vue-components vuex-persistedstate在页面重新加载之间保持并重载您的 Vuex 状态https://github.com/robinvdvleuten/vuex-persistedstate vuex-persist支持 Typescript 的Vuex插件，它能够将应用程序的状态保存到持久存储中，例如 Cookies 或 localStoragehttps://championswimmer.in/vuex-persist/ @vueuse/gesture手势库，使应用程序具有交互性https://gesture.vueuse.org/ unplugin-auto-importantfu 自动导入 Vite、Webpack、Rollup 和 esbuild 的 API。支持 TypeScript。https://github.com/antfu/unplugin-auto-import pinia-plugin-persistedstatePinia 商店的可配置持久性https://github.com/prazdevs/pinia-plugin-persistedstate https://vue-termui.dev/一个基于 Vue.js 的终端 UI 框架，可让您轻松构建现代终端应用程序https://vue-termui.dev/4.可视化 PdfvuerDF 查看器，使用 Mozilla 的 PDF.js，支持 Vue2 和 Vue3https://arkokoley.github.io/pdfvuer/ vue3-marquee无缝滚动组件https://vue3-marquee.vercel.app/ Vue-ECharts百度ECharts 的 Vue.js 组件。 配置参考Echarts官方 基于 ECharts v5+ 开发，适用于Vue.js 2/3。https://vue-echarts.dev/ iconpark字节跳动出品，将一个SVG图标转化为多个主题，并生成React图标，Vue图标，svg图标https://iconpark.oceanengine.com/home5.插件 vue-multiselect-nextVue.js 的通用选择/多选/标记组件https://vue-multiselect.js.org/ vue-print-nb用于印刷、简单、快速、方便、轻便的指令包装器https://github.com/Power-kxLee/vue-print-nb vue-i18n-nextVue3的国际化插件https://vue-i18n.intlify.dev/ vue-cropper简单的vue图片裁剪插件http://github.xyxiao.cn/vue-cropper/example/ Grid LayoutVue.js 的网格布局系统https://jbaysolutions.github.io/ Vue Qrcode Reader允许在不离开浏览器的情况下检测和解码二维码https://gruhn.github.io/vue-qrcode-reader/ Makeit Captcha基于 Vue3 + Vite + Canvas 开发的滑块验证码，动态生成验证滑块，结合后端的二次校验，能有效的避免被抓取模拟验证https://admin.makeit.vip/components/captcha vue3-clipboardVue 3 的 clipboard.jshttps://github.com/soerenmartius/vue3-clipboard vue.draggable基于Sortable.js的Vue 3拖放组件https://sortablejs.github.io/vue.draggable.next/#/simple BetterScroll解决移动端（已支持 PC）各种滚动场景需求的插件。https://better-scroll.github.io/docs/zh-CN/6.相关生态 Vue 插件库https://www.vue365.cn/ Pinia轻量级状态管理库，API 设计更接近Vuex 5的提案https://pinia.vuejs.org/ Nuxt ModulesNuxt 发现我们的模块列表以增强您的Nuxt 项目https://modules.nuxtjs.org/ Nuxt 3轻量级应用框架,可用来创建服务端渲染 (SSR) 应用https://v3.nuxtjs.org/ vuepressVue 驱动的静态网站生成器https://v2.vuepress.vuejs.org/zh/ VueUse强大的 Vue 组合实用程序集合https://vueuse.org/7.动画 vue-starport带有动画的跨路由共享组件https://vue-starport.netlify.app/ @vueuse/motionVue Composables 让你的组件动起来https://motion.vueuse.org/8.音视频 @vueuse/sound用于播放音效的 Vue 组合https://sound.vueuse.org/全栈-后端插件 isomorphic-git用于节点和浏览器的 git 纯 JavaScript 实现https://isomorphic-git.org/ jsonwebtokennode.js 的 JsonWebToken 实现https://github.com/auth0/node-jsonwebtoken Qiniu SDK七牛资源（云）存储 SDK for Node.jshttps://developer.qiniu.com/kodo/sdk/nodejs koa-body功能齐全的koa正文解析器中间件，支持multipart、urlencoded和json请求正文，提供与 Express 的 bodyParser 相同的功能https://github.com/koajs/koa-body koa-json-error纯Koa JSON 应用程序的错误处理程序，显示堆栈跟踪https://github.com/koajs/json-error koa-jwt用于验证 JSON Web 令牌的 Koa 中间件https://github.com/koajs/jwt koa-routerKoa 的路由器中间件https://github.com/koajs/router koa2-corskoa2 的 CORS 中间件https://github.com/zadzbw/koa2-cors koa-sslify为 Koa.js 实施 HTTPS 中间件https://github.com/turboMaCk/koa-sslify superagent-proxy允许您通过某种代理来代理 HTTP 请求https://github.com/TooTallNate/superagent-proxy node-http-proxy-agenHTTP 端点的 HTTP(s) 代理“http.Agent”实现https://github.com/TooTallNate/node-http-proxy-agent https-proxy-agentHTTPS 端点的 HTTP(s) 代理“http.Agent”实现https://github.com/TooTallNate/node-https-proxy-agent socks-proxy-agent用于 HTTP 和 HTTPS 的 SOCKS (v4/v5) 代理“http.Agent”实现https://github.com/TooTallNate/node-socks-proxy-agent simple-get发出 http get 请求的最简单方法。支持 HTTPS、重定向、gzip/deflate、小于 100 行的流https://github.com/feross/simple-get commander.jsnode.js命令行界面的完整解决方案https://github.com/tj/commander.js ora命令行 loading 动效https://github.com/sindresorhus/ora dotenv从 .env 为 nodejs 项目加载环境变量https://github.com/motdotla/dotenv FFCreator基于node.js的高速视频制作库https://tnfe.github.io/FFCreator/#/ sharp高性能 Node.js 图像处理，调整 JPEG、PNG、WebP、AVIF 和 TIFF 图像大小的最快模块https://sharp.pixelplumbing.com/ node-fs-extra强大的文件操作库， 是 Nodejs fs 模块 的增强版https://github.com/jprichardson/node-fs-extra chokidar用于文件监控的库，解决兼容性不好、无法监听、监听多次 等大量影响性能的问题https://paulmillr.com/ fast-glob快速批量导入、读取文件的库https://github.com/mrmlnc/fast-glob peerflixnode.js 的流式 torrent 客户端https://github.com/mafintosh/peerflix工具 Nginx高性能的HTTP和反向代理web服务器，同时也提供了IMAP/POP3/SMTP服务https://blog.redis.com.cn/doc/ PM2Node进程管理工具，如性能监控、自动重启、负载均衡等https://pm2.keymetrics.io/docs/usage/process-management/ nodemon监视 node.js 应用程序中的任何更改并自动重新启动服务器https://nodemon.io/ RobotJSNode.js 桌面自动化，控制鼠标、键盘和阅读屏幕等http://robotjs.io/ Jenkins领先的开源自动化服务器，Jenkins 提供了数百个插件来支持构建、部署和自动化任何项目https://www.jenkins.io/ nexe将 node.js 应用程序中创建一个可执行文件https://github.com/nexe/nexe debug模仿 Node.js 核心调试技术的小型 JavaScript 调试实用程序。适用于 Node.js 和 Web 浏览器https://github.com/debug-js/debug数据库 mongoose旨在在异步环境中工作的 MongoDB 对象建模https://mongoosejs.com/ GraphQL用于 API 的查询语言也是一个满足你数据查询的运行时https://graphql.cn/ lowdb数据库适用于Node，Electron和浏览器的小型JSON数据库。由Lodash驱动https://github.com/typicode/lowdb nedb适用于Node.js，nw.js，Electron和浏览器的嵌入式持久性数据库或内存数据库,API是MongoDB的子集https://github.com/louischatriot/nedbAPI 网易云音乐 API全部接口已升级到最新，具备登录接口,多达200多个接口https://binaryify.github.io/NeteaseCloudMusicApi/#/ Node-SpliderApi基于 Node+Express 网络爬虫 API 接口 包括前端开发日报、kugou 音乐、前端 top 框架排行、妹纸福利、搞笑视频、段子笑话、各类视频新闻资讯 热点详情接口数据,接口数据更新目标https://ecitlm.github.io/Node-SpliderApi/ 聚合数据免费向开发者提供全国车辆违章查询API,天气API,基站数据,移动联通基站,电信基站,覆盖国内外1000多个主要城市公共交通信息数据https://www.juhe.cn/ 极速数据提供各类生活数据API,方便开发者快速简单的开发APP、软件及其他服务平台https://www.jisuapi.com/ 京东万象供金融、电商、运营商数据,免费数据,热门数据,学籍数据,企业诉讼数据,实名认证,征信数据,质检等多种数据https://wx.jdcloud.com/api QQ音乐API通过Web网页版请求QQ音乐接口数据https://rain120.github.io/qq-music-api/#/ 万维易源一站式全网API调用平台https://www.showapi.com/ TP5 Splider Api基于Thinkphp5+phpQuery 网络爬虫抓取数据接口 统一输出接口数据apihttps://ecitlm.github.io/TP5_Splider/#/ Roll API提供开发中常用数据的一个稳定聚合Api接口https://www.mxnzp.com/doc/list Open API收集可用的Open APIshttps://www.wanandroid.com/openapis 天行数据160多个免费接口，接口高度统一，简单易用，毫秒级响应https://www.tianapi.com/ free-api免费API,收集免费的接口服务https://www.free-api.com/ douban-imdb-api基于豆瓣、IMDB、烂番茄评分的电影电视剧双语(中英)数据api接口https://www.iqi360.com/p/douban-imdb-api框架 Koa基于 Node.js 平台的下一代 web 开发框架https://koajs.com/ Express用于Node.js 的快速、独立、简约的 Web 框架https://expressjs.com/ egg.js为企业级框架和应用而生https://www.eggjs.org/ Nest.js构建高效且可扩展的服务器端应用程序的渐进式Node.js框架https://nestjs.com/ XMind: ZEN - Trial Version","permalink":"http://www.start6.cn/2022/10/25/front/2022%E5%B9%B4%E6%8A%80%E6%9C%AF%E8%83%96%E7%A7%81%E8%97%8F%E5%B7%A5%E5%85%B7%E5%88%86%E4%BA%AB/","photos":[]},{"tags":[{"name":"前端","slug":"前端","permalink":"http://www.start6.cn/tags/%E5%89%8D%E7%AB%AF/"}],"title":"angular打包错误ERROR in Illegal State issue when giving angular build","date":"2022/10/18","text":"123456789const a = [1,2,3,4,5]const result = [];for(let i=0;i&lt;a.length; i+=3) &#123; const r = a.slice(3, i+3); console.log(r); result.push(r)&#125;console.log(result, &#x27;result&#x27;)","permalink":"http://www.start6.cn/2022/10/18/javascript/javascript%E6%95%B0%E7%BB%84%E6%8B%86%E5%88%863%E4%B8%AA%E4%B8%80%E7%BB%84/","photos":[]},{"tags":[{"name":"打包","slug":"打包","permalink":"http://www.start6.cn/tags/%E6%89%93%E5%8C%85/"}],"title":"flutter 打包release部分功能无法使用","date":"2021/03/27","text":"问题分析 flutter本地测试debug打包、运行功能正常使用，但是打包release之后发现部分功能无法使用，直接卡到首屏，路由也不执行跳转 本地运行 flutter run --release --verbose 发现没有任何错误 问题猜测 打包release版本参数配置问题，混淆，或者tree shaking 部分代码没有生效? 问题解决 参考flutter中文网 android版本打包release https://flutterchina.club/android-release/ 参考 release打包闪退 https://segmentfault.com/a/1190000021610587 直接在 app/build.gradle配置 12minifyEnabled false //删除无用代码shrinkResources false //删除无用资源 重新打包问题解决","permalink":"http://www.start6.cn/2021/03/27/flutter/flutter-%E6%89%93%E5%8C%85release%E9%83%A8%E5%88%86%E5%8A%9F%E8%83%BD%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8/","photos":[]},{"tags":[{"name":"工具","slug":"工具","permalink":"http://www.start6.cn/tags/%E5%B7%A5%E5%85%B7/"}],"title":"typora 自动上传图片到gitee","date":"2021/03/25","text":"直接安装picGo软件 https://github.com/Molunerfinn/PicGo/releases/tag/v2.3.0-beta.41. 使用 node 安装 PicGo-Core12345// npm 命令执行速度过慢的话，我们可以使用一下淘宝的镜像 npm install -g picgo --registry=https://registry.npm.taobao.org// 安装完成以后测试一下是否安装成功picgo -v 2. 使用 picgo 命令安装 gitee-uploader 插件1picgo install gitee-uploader 3. 使用 picgo 命令设置 uploader1picgo set uploader 1234567891011121314151617181920C:\\Users\\Run\\Desktop&gt;picgo set uploader? Choose a(n) uploader (Use arrow keys)❯ gitee smms tcyun github qiniu imgur aliyun upyun(Move up and down to reveal more choices)? Choose a(n) uploader gitee? repo: xxxx/image? branch: master? token: 5a34fa3f348d556...? path: 2020? customPath: 年月? customUrl: https://gitee.com/xxxx/image/raw/master/[PicGo SUCCESS]: Configure config successfully! 4. 配置 Typro 上传服务设定重点是 自定义命令 的组成部分： [your node path] [your picgo path] upload 键 值 上传服务 Custom Command 自定义命令 D:\\nodejs\\node.exe D:\\nodejs\\node_global\\node_modules\\picgo\\bin\\picgo upload 注意：配置完成后可以点击 验证图片上传选项 来测试是否配置成功 5. 完整的配置文件以下是参照 PicGo-Core官方文档 的进行的配置 首先我们需要找到我们的配置文件，picgo 的默认配置文件在不同系统的目录不太一样：linux 和 macOS 均为 ~/.picgo/config.jsonwindows 则为 C:\\Users\\&#123;你的用户名&#125;\\.picgo\\config.json 123456789101112131415161718192021&#123; &quot;picBed&quot;: &#123; &quot;current&quot;: &quot;gitee&quot;, &quot;gitee&quot;: &#123; &quot;repo&quot;: &quot;xxxx/image&quot;, &quot;branch&quot;: &quot;master&quot;, &quot;token&quot;: &quot;5a34fa3f348d556...&quot;, &quot;path&quot;: &quot;2020&quot;, &quot;customPath&quot;: &quot;yearMonth&quot;, &quot;customUrl&quot;: &quot;https://gitee.com/xxxx/image/raw/master/&quot; &#125;, &quot;uploader&quot;: &quot;gitee&quot;, &quot;transformer&quot;: &quot;path&quot; &#125;, &quot;picgoPlugins&quot;: &#123; &quot;picgo-plugin-gitee-uploader&quot;: true &#125;, &quot;picgo-plugin-gitee-uploader&quot;: &#123; &quot;lastSync&quot;: &quot;2020-07-30 10:29:26&quot; &#125;&#125; 6. 解决 文件大于1M，登录后可见 的问题1按照步骤 1-6 我们确实成功地配置了一个免费好用的 Gitee图床，简单使用也没有什么问题。可是当我们上传的图片大小超过 1M 后：OMG，图片无法正常显示，在浏览器中打开图片的地址，直接跳转到 Gitee 登录界面，并且出现出现了很扎心的 文件大于1M，登录后可见 文字的提示。关键是这个文件大小限制还没有办法解决，凉凉！！！ 凉凉？不存在的！ 俗话说：办法总比困难多。我们访问 git 仓库中文件的方式并不是只有一种，更何况它只是一些静态的资源文件。所以是不是只要我们想办法配置一个简单的HTTP服务就可以了。问题迎刃而解：Gitee 官方给我们提供了一种供博客 / 门户 / 开源项目网站 / 开源项目静态效果演示用途的 Git Pages服务。 7.1 开启 Git Pages 服务 进入到阁下 Gitee 图床 所在仓库的页面，找到 服务 -&gt; Gitee Pages 无需修改任何配置。直接点击 启动按钮，等待服务启动完毕即可。 7.2 更新图片访问的路径123当我们的 图床仓库 开启 Git Pages 服务后，就会得到一个专属的网站地址，格式为：“ 个人空间地址.gitee.io/仓库名” 。例如：http://zi1.gitee.io/pic，则我们访问该图床中的静态资源文件的路径为 http://zi1.gitee.io/pic + 仓库中文件的可见路径。 比如：你的仓库中的 picture 目录下的 1.jpg 的图片文件： picture/1.jpg，则我们访问该图片的路径为：http://zi1.gitee.io/pic/picture/1.jpg 8. 开启 Git Pages 后完整的配置文件123456789101112131415161718192021&#123; &quot;picBed&quot;: &#123; &quot;current&quot;: &quot;gitee&quot;, &quot;gitee&quot;: &#123; &quot;repo&quot;: &quot;xxxx/image&quot;, &quot;branch&quot;: &quot;master&quot;, &quot;token&quot;: &quot;5a34fa3f348d556...&quot;, &quot;path&quot;: &quot;2020&quot;, &quot;customPath&quot;: &quot;yearMonth&quot;, &quot;customUrl&quot;: &quot;https://xxxx.gitee.io/image/&quot; &#125;, &quot;uploader&quot;: &quot;gitee&quot;, &quot;transformer&quot;: &quot;path&quot; &#125;, &quot;picgoPlugins&quot;: &#123; &quot;picgo-plugin-gitee-uploader&quot;: true &#125;, &quot;picgo-plugin-gitee-uploader&quot;: &#123; &quot;lastSync&quot;: &quot;2020-10-12 09:23:39&quot; &#125;&#125; D:\\nodejs\\node.exe D:\\nodejs\\node_global\\node_modules\\picgo\\bin\\picgo upload C:\\Program Files\\nodejs\\node.exe C:\\Program Files\\nodejs\\node_modules\\picgo\\bin\\picgo upload","permalink":"http://www.start6.cn/2021/03/25/tool/typora-%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E5%88%B0gitee/","photos":[]},{"tags":[{"name":"nginx资源加载","slug":"nginx资源加载","permalink":"http://www.start6.cn/tags/nginx%E8%B5%84%E6%BA%90%E5%8A%A0%E8%BD%BD/"}],"title":"nginx配置静态资源加载","date":"2021/03/25","text":"alias配置 1234location /img/ &#123; alias /home/; autoindex on;&#125; 访问路径是 ip:端口/img 最终去本地硬盘找的路径是 /home (系统文件) root配置 1234location /img/ &#123; root /home/; autoindex on;&#125; 访问路径是 ip:端口/img 最终去本地硬盘找的路径是 /home/img (系统文件) 参考地址 https://blog.csdn.net/a760352276/article/details/106774599","permalink":"http://www.start6.cn/2021/03/25/tool/nginx%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E5%8A%A0%E8%BD%BD/","photos":[]},{"tags":[{"name":"工具","slug":"工具","permalink":"http://www.start6.cn/tags/%E5%B7%A5%E5%85%B7/"}],"title":"IDEA 下 SpringBoot 自动重启、热部署   spring-boot-devtools或者JRebel","date":"2021/03/24","text":"spring-boot-devtools idea设置 settings ctrl+shift+A 打开搜索Registry 点击一下 然后搜索 app，打上对钩 pom文件添加 123456&lt;!-- spring-boot-devtools --&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;!-- 表示依赖不会传递 --&gt;&lt;/dependency&gt; 插件位置配置一下 123456789101112&lt;build&gt; &lt;finalName&gt;$&#123;project.artifactId&#125;&lt;/finalName&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;configuration&gt; &lt;fork&gt;true&lt;/fork&gt; &lt;!-- 如果没有该配置，devtools不会生效 --&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt;&lt;/build&gt; 查看窗口更改代码应该直接就自动重启了JRebel方式 不用重启，直接就热更新了 现在plugins安装 jrebel 收费的，需要破解一下，白嫖的香~ 在线生成GUID地址 根据反向代理服务器地址拼接激活地址 服务器地址： https://jrebel.qekang.com/{GUID} PS：如果失效刷新GUID替换就可以！ 打开jrebel 激活面板 . 选择Connect to online licensing service . 破解成功，开始愉快地编码","permalink":"http://www.start6.cn/2021/03/24/tool/IDEA-%E4%B8%8B-SpringBoot-%E8%87%AA%E5%8A%A8%E9%87%8D%E5%90%AF%E3%80%81%E7%83%AD%E9%83%A8%E7%BD%B2-spring-boot-devtools%E6%88%96%E8%80%85JRebel/","photos":[]},{"tags":[{"name":"工具","slug":"工具","permalink":"http://www.start6.cn/tags/%E5%B7%A5%E5%85%B7/"}],"title":"hexo,githubpage自定义域名失效","date":"2020/12/09","text":"使用 gitpage 功能将博客托管在了 github 上，并配置 CNAME 将自己的域名解析了过去，在 github 的仓库设置中开始 custom domain 的功能，这时候就可以直接使用自己的域名访问啦。 但是发现一个问题是，每次配置 custom domain 之后，再次 hexo deploy 之后，custom domain 会被重置失效。 解决方案在 hexo 生成的博客的 source 目录下新建一个 CNAME 文件，然后在这个文件中填入你的域名，这样就不会每次发布之后，gitpage 里的 custom domain 都被重置掉啦。","permalink":"http://www.start6.cn/2020/12/09/tool/hexo,githubpage%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E5%A4%B1%E6%95%88/","photos":[]},{"tags":[{"name":"工具","slug":"工具","permalink":"http://www.start6.cn/tags/%E5%B7%A5%E5%85%B7/"}],"title":"windows安装cygwin","date":"2020/12/09","text":"下载 maven官网地址 配置环境变量 在配置之前请将JDK安装好。 添加M2_HOME:对应Maven的解压目录即可。 编辑Path环境变量： 添加 %M2_HOME%\\bin 测试，在cmd窗口输入mvn -v查看 显示如下即配置成功 为什么慢执行 mvn 各种命令的时候，默认是去 maven 官方镜像源获取需要安装的具体软件信息 默认源地址在国外，从国内访问的速度肯定比较慢 方法一： 配置只在当前项目生效 在 pom.xml 文件内添加以下配置 123456&lt;repositories&gt; &lt;repository&gt; &lt;id&gt;ali-maven&lt;/id&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt; &lt;/repository&gt;&lt;/repositories&gt; 方法二： 配置全局生效 修改 settings.xml 文件 找到 mirrors 标签，在里面加入以下内容 123456&lt;mirror&gt; &lt;id&gt;alimaven&lt;/id&gt; &lt;name&gt;aliyun maven&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;&lt;/mirror&gt; 可以在以下路径查找到 settings.xml 文件 (用户家目录)/.m2/settings.xml (maven 安装目录)/conf/settings.xml， 如果是 Mac 系统通过 brew 命令安装的，在这里： /usr/local/Cellar/maven/(版本号)/libexec/conf/settings.xml 参考地址详细配置1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;settings xmlns=&quot;http://maven.apache.org/SETTINGS/1.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;&gt; &lt;localRepository/&gt; &lt;interactiveMode/&gt; &lt;usePluginRegistry/&gt; &lt;offline/&gt; &lt;pluginGroups/&gt; &lt;servers/&gt; &lt;mirrors&gt; &lt;mirror&gt; &lt;id&gt;aliyunmaven&lt;/id&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;name&gt;阿里云公共仓库&lt;/name&gt; &lt;url&gt;https://maven.aliyun.com/repository/central&lt;/url&gt; &lt;/mirror&gt; &lt;mirror&gt; &lt;id&gt;repo1&lt;/id&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;name&gt;central repo&lt;/name&gt; &lt;url&gt;http://repo1.maven.org/maven2/&lt;/url&gt; &lt;/mirror&gt; &lt;mirror&gt; &lt;id&gt;aliyunmaven&lt;/id&gt; &lt;mirrorOf&gt;apache snapshots&lt;/mirrorOf&gt; &lt;name&gt;阿里云阿帕奇仓库&lt;/name&gt; &lt;url&gt;https://maven.aliyun.com/repository/apache-snapshots&lt;/url&gt; &lt;/mirror&gt; &lt;/mirrors&gt; &lt;proxies/&gt; &lt;activeProfiles/&gt; &lt;profiles&gt; &lt;profile&gt; &lt;repositories&gt; &lt;repository&gt; &lt;id&gt;aliyunmaven&lt;/id&gt; &lt;name&gt;aliyunmaven&lt;/name&gt; &lt;url&gt;https://maven.aliyun.com/repository/public&lt;/url&gt; &lt;layout&gt;default&lt;/layout&gt; &lt;releases&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/releases&gt; &lt;snapshots&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/snapshots&gt; &lt;/repository&gt; &lt;repository&gt; &lt;id&gt;MavenCentral&lt;/id&gt; &lt;url&gt;http://repo1.maven.org/maven2/&lt;/url&gt; &lt;/repository&gt; &lt;repository&gt; &lt;id&gt;aliyunmavenApache&lt;/id&gt; &lt;url&gt;https://maven.aliyun.com/repository/apache-snapshots&lt;/url&gt; &lt;/repository&gt; &lt;/repositories&gt; &lt;/profile&gt; &lt;/profiles&gt;&lt;/settings&gt;","permalink":"http://www.start6.cn/2020/12/09/tool/maven%E9%85%8D%E7%BD%AE%E5%8A%A0%E9%80%9F%E9%95%9C%E5%83%8F/","photos":[]},{"tags":[{"name":"工具","slug":"工具","permalink":"http://www.start6.cn/tags/%E5%B7%A5%E5%85%B7/"}],"title":"settings.xml配置文件(最简单的可用版本)","date":"2020/12/09","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;!--Licensed to the Apache Software Foundation (ASF) under oneor more contributor license agreements. See the NOTICE filedistributed with this work for additional informationregarding copyright ownership. The ASF licenses this fileto you under the Apache License, Version 2.0 (the&quot;License&quot;); you may not use this file except in compliancewith the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0Unless required by applicable law or agreed to in writing,software distributed under the License is distributed on an&quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANYKIND, either express or implied. See the License for thespecific language governing permissions and limitationsunder the License.--&gt; &lt;!-- | This is the configuration file for Maven. It can be specified at two levels: | | 1. User Level. This settings.xml file provides configuration for a single user, | and is normally provided in $&#123;user.home&#125;/.m2/settings.xml. | | NOTE: This location can be overridden with the CLI option: | | -s /path/to/user/settings.xml | | 2. Global Level. This settings.xml file provides configuration for all Maven | users on a machine (assuming they&#x27;re all using the same Maven | installation). It&#x27;s normally provided in | $&#123;maven.conf&#125;/settings.xml. | | NOTE: This location can be overridden with the CLI option: | | -gs /path/to/global/settings.xml | | The sections in this sample file are intended to give you a running start at | getting the most out of your Maven installation. Where appropriate, the default | values (values used when the setting is not specified) are provided. | |--&gt;&lt;settings xmlns=&quot;http://maven.apache.org/SETTINGS/1.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;&gt; &lt;!-- localRepository | The path to the local repository maven will use to store artifacts. | | Default: $&#123;user.home&#125;/.m2/repository --&gt; &lt;localRepository&gt;D:\\devEnviroment\\maven\\repo&lt;/localRepository&gt; &lt;!-- interactiveMode | This will determine whether maven prompts you when it needs input. If set to false, | maven will use a sensible default value, perhaps based on some other setting, for | the parameter in question. | | Default: true &lt;interactiveMode&gt;true&lt;/interactiveMode&gt; --&gt; &lt;!-- offline | Determines whether maven should attempt to connect to the network when executing a build. | This will have an effect on artifact downloads, artifact deployment, and others. | | Default: false &lt;offline&gt;false&lt;/offline&gt; --&gt; &lt;!-- pluginGroups | This is a list of additional group identifiers that will be searched when resolving plugins by their prefix, i.e. | when invoking a command line like &quot;mvn prefix:goal&quot;. Maven will automatically add the group identifiers | &quot;org.apache.maven.plugins&quot; and &quot;org.codehaus.mojo&quot; if these are not already contained in the list. |--&gt; &lt;pluginGroups&gt; &lt;!-- pluginGroup | Specifies a further group identifier to use for plugin lookup. &lt;pluginGroup&gt;com.your.plugins&lt;/pluginGroup&gt; --&gt; &lt;/pluginGroups&gt; &lt;!-- proxies | This is a list of proxies which can be used on this machine to connect to the network. | Unless otherwise specified (by system property or command-line switch), the first proxy | specification in this list marked as active will be used. |--&gt; &lt;proxies&gt; &lt;!-- proxy | Specification for one proxy, to be used in connecting to the network. | &lt;proxy&gt; &lt;id&gt;optional&lt;/id&gt; &lt;active&gt;true&lt;/active&gt; &lt;protocol&gt;http&lt;/protocol&gt; &lt;username&gt;proxyuser&lt;/username&gt; &lt;password&gt;proxypass&lt;/password&gt; &lt;host&gt;proxy.host.net&lt;/host&gt; &lt;port&gt;80&lt;/port&gt; &lt;nonProxyHosts&gt;local.net|some.host.com&lt;/nonProxyHosts&gt; &lt;/proxy&gt; --&gt; &lt;/proxies&gt; &lt;!-- servers | This is a list of authentication profiles, keyed by the server-id used within the system. | Authentication profiles can be used whenever maven must make a connection to a remote server. |--&gt; &lt;servers&gt; &lt;!-- server | Specifies the authentication information to use when connecting to a particular server, identified by | a unique name within the system (referred to by the &#x27;id&#x27; attribute below). | | NOTE: You should either specify username/password OR privateKey/passphrase, since these pairings are | used together. | &lt;server&gt; &lt;id&gt;deploymentRepo&lt;/id&gt; &lt;username&gt;repouser&lt;/username&gt; &lt;password&gt;repopwd&lt;/password&gt; &lt;/server&gt; --&gt; &lt;!-- Another sample, using keys to authenticate. &lt;server&gt; &lt;id&gt;siteServer&lt;/id&gt; &lt;privateKey&gt;/path/to/private/key&lt;/privateKey&gt; &lt;passphrase&gt;optional; leave empty if not used.&lt;/passphrase&gt; &lt;/server&gt; --&gt; &lt;/servers&gt; &lt;!-- mirrors | This is a list of mirrors to be used in downloading artifacts from remote repositories. | | It works like this: a POM may declare a repository to use in resolving certain artifacts. | However, this repository may have problems with heavy traffic at times, so people have mirrored | it to several places. | | That repository definition will have a unique id, so we can create a mirror reference for that | repository, to be used as an alternate download site. The mirror site will be the preferred | server for that repository. |--&gt; &lt;mirrors&gt; &lt;!-- mirror | Specifies a repository mirror site to use instead of a given repository. The repository that | this mirror serves has an ID that matches the mirrorOf element of this mirror. IDs are used | for inheritance and direct lookup purposes, and must be unique across the set of mirrors. | &lt;mirror&gt; &lt;id&gt;mirrorId&lt;/id&gt; &lt;mirrorOf&gt;repositoryId&lt;/mirrorOf&gt; &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt; &lt;url&gt;http://my.repository.com/repo/path&lt;/url&gt; &lt;/mirror&gt; --&gt; &lt;mirror&gt; &lt;id&gt;nexus-aliyun&lt;/id&gt; &lt;mirrorOf&gt;*&lt;/mirrorOf&gt; &lt;name&gt;Nexus aliyun&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt; &lt;/mirror&gt; &lt;/mirrors&gt; &lt;!-- profiles | This is a list of profiles which can be activated in a variety of ways, and which can modify | the build process. Profiles provided in the settings.xml are intended to provide local machine- | specific paths and repository locations which allow the build to work in the local environment. | | For example, if you have an integration testing plugin - like cactus - that needs to know where | your Tomcat instance is installed, you can provide a variable here such that the variable is | dereferenced during the build process to configure the cactus plugin. | | As noted above, profiles can be activated in a variety of ways. One way - the activeProfiles | section of this document (settings.xml) - will be discussed later. Another way essentially | relies on the detection of a system property, either matching a particular value for the property, | or merely testing its existence. Profiles can also be activated by JDK version prefix, where a | value of &#x27;1.4&#x27; might activate a profile when the build is executed on a JDK version of &#x27;1.4.2_07&#x27;. | Finally, the list of active profiles can be specified directly from the command line. | | NOTE: For profiles defined in the settings.xml, you are restricted to specifying only artifact | repositories, plugin repositories, and free-form properties to be used as configuration | variables for plugins in the POM. | |--&gt; &lt;profiles&gt; &lt;!-- profile | Specifies a set of introductions to the build process, to be activated using one or more of the | mechanisms described above. For inheritance purposes, and to activate profiles via &lt;activatedProfiles/&gt; | or the command line, profiles have to have an ID that is unique. | | An encouraged best practice for profile identification is to use a consistent naming convention | for profiles, such as &#x27;env-dev&#x27;, &#x27;env-test&#x27;, &#x27;env-production&#x27;, &#x27;user-jdcasey&#x27;, &#x27;user-brett&#x27;, etc. | This will make it more intuitive to understand what the set of introduced profiles is attempting | to accomplish, particularly when you only have a list of profile id&#x27;s for debug. | | This profile example uses the JDK version to trigger activation, and provides a JDK-specific repo. &lt;profile&gt; &lt;id&gt;jdk-1.4&lt;/id&gt; &lt;activation&gt; &lt;jdk&gt;1.4&lt;/jdk&gt; &lt;/activation&gt; &lt;repositories&gt; &lt;repository&gt; &lt;id&gt;jdk14&lt;/id&gt; &lt;name&gt;Repository for JDK 1.4 builds&lt;/name&gt; &lt;url&gt;http://www.myhost.com/maven/jdk14&lt;/url&gt; &lt;layout&gt;default&lt;/layout&gt; &lt;snapshotPolicy&gt;always&lt;/snapshotPolicy&gt; &lt;/repository&gt; &lt;/repositories&gt; &lt;/profile&gt; --&gt; &lt;!-- | Here is another profile, activated by the system property &#x27;target-env&#x27; with a value of &#x27;dev&#x27;, | which provides a specific path to the Tomcat instance. To use this, your plugin configuration | might hypothetically look like: | | ... | &lt;plugin&gt; | &lt;groupId&gt;org.myco.myplugins&lt;/groupId&gt; | &lt;artifactId&gt;myplugin&lt;/artifactId&gt; | | &lt;configuration&gt; | &lt;tomcatLocation&gt;$&#123;tomcatPath&#125;&lt;/tomcatLocation&gt; | &lt;/configuration&gt; | &lt;/plugin&gt; | ... | | NOTE: If you just wanted to inject this configuration whenever someone set &#x27;target-env&#x27; to | anything, you could just leave off the &lt;value/&gt; inside the activation-property. | &lt;profile&gt; &lt;id&gt;env-dev&lt;/id&gt; &lt;activation&gt; &lt;property&gt; &lt;name&gt;target-env&lt;/name&gt; &lt;value&gt;dev&lt;/value&gt; &lt;/property&gt; &lt;/activation&gt; &lt;properties&gt; &lt;tomcatPath&gt;/path/to/tomcat/instance&lt;/tomcatPath&gt; &lt;/properties&gt; &lt;/profile&gt; --&gt; &lt;/profiles&gt; &lt;!-- activeProfiles | List of profiles that are active for all builds. | &lt;activeProfiles&gt; &lt;activeProfile&gt;alwaysActiveProfile&lt;/activeProfile&gt; &lt;activeProfile&gt;anotherAlwaysActiveProfile&lt;/activeProfile&gt; &lt;/activeProfiles&gt; --&gt; 以上是settings.xml文件的全部内容，直接全部复制即可用。 备注：settings.xml文件从maven的安装目录下的conf下的settings.xml文件改造而来，只做了两个地方的修改，一个是D:\\devEnviroment\\maven\\repo，这里需要改成自己的仓库地址(自己定，随意都行)，第二个修改是镜像的配置，加入的代码是下面的代码块 1234567&lt;mirror&gt; &lt;id&gt;nexus-aliyun&lt;/id&gt; &lt;mirrorOf&gt;*&lt;/mirrorOf&gt; &lt;name&gt;Nexus aliyun&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;&lt;/mirror&gt;","permalink":"http://www.start6.cn/2020/12/09/tool/settings.xml%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/","photos":[]},{"tags":[{"name":"工具","slug":"工具","permalink":"http://www.start6.cn/tags/%E5%B7%A5%E5%85%B7/"}],"title":"windows安装cygwin","date":"2020/12/09","text":"安装地址: http://www.cygwin.com/添加到鼠标右键在当前位置打开 在cygwin中安装chere 管理员权限执行mintty,输入下列命令 chere -i -t mintty -s bash 之后,鼠标右键将会显示一个Bash Prompt Here. 如果想要修改请到HKEY_CLASSES_ROOT\\Directory\\background\\shell\\cygwin64_bash修改,也可以添加Ext ended键,按下shift才出现.","permalink":"http://www.start6.cn/2020/12/09/tool/windows%E5%AE%89%E8%A3%85cygwin/","photos":[]},{"tags":[],"title":"家里树莓派配置","date":"2020/12/07","text":"代理工具 frp地址 https://github.com/fatedier/frp 其他代理 ngrok 配置 挂载了一块硬盘到/home/pi/hardDisk/RaspberryPi 下面 防火墙使用 ufw 开机启动服务 https://www.jianshu.com/p/f5527d73bca3 frp文件位置 /home/pi/Desktop/frp/frp 启动 systemctl start frp 开机自启动frp服务 启动遇到的问题（重启 因为是请求网络，网络没有连接就直接启动了） 解决方案: /usr/lib/systemd/system/frp.service 文件中添加 RestartSec 表示 Systemd 重启服务之前，需要等待的秒数。上面的例子设为等待42秒。 参考地址 https://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-part-two.html 软件 codeServe网盘搭建 https://github.com/cloudreve/Cloudreve 监听5212端口 配置node linux，软链接配置node,npm全局命令 sudo ln -s /usr/local/bin/node /bin/node sudo ln -s /usr/local/bin/npm /bin/npm 这样配置后，在root下和别的用户下都能使用node命令 安装软件包 sudo apt update 、 sudo apt upgrade 安装mongodb sudo apt-get install mongodb sudo systemctl enable mongodb sudo systemctl start mongodb mongo 安装redis sudo apt-get install redis-server 不能访问redis 在/etc/redis/redis.conf 里面的bind 127.0.0.1前面加上一个#,注释就可以访问了，端口是6379 linux dash 监控面板 https://github.com/NoBey/linux-dash-zh ☺ 目前启动服务： mock 网盘","permalink":"http://www.start6.cn/2020/12/07/tool/%E5%AE%B6%E9%87%8C%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE/","photos":[]},{"tags":[{"name":"前端","slug":"前端","permalink":"http://www.start6.cn/tags/%E5%89%8D%E7%AB%AF/"}],"title":"vscode node.js应用代码调试","date":"2020/04/12","text":"vscode代码配置: 123456789101112131415161718192021&#123; // 使用 IntelliSense 了解相关属性。 // 悬停以查看现有属性的描述。 // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387 &quot;version&quot;: &quot;0.2.0&quot;, &quot;configurations&quot;: [&#123; &quot;type&quot;: &quot;node&quot;, &quot;request&quot;: &quot;launch&quot;, &quot;name&quot;: &quot;启动程序&quot;, // &quot;program&quot;: &quot;$&#123;workspaceRoot&#125;/node/index.js&quot; &quot;runtimeExecutable&quot;: &quot;nodemon&quot;, &quot;args&quot;: [&quot;$&#123;workspaceRoot&#125;/node/index.js&quot;], &quot;restart&quot;: true, &quot;protocol&quot;: &quot;inspector&quot;, &quot;sourceMaps&quot;: true, &quot;console&quot;: &quot;integratedTerminal&quot;, &quot;internalConsoleOptions&quot;: &quot;neverOpen&quot;, // 其他附加配置 &quot;runtimeArgs&quot;: [] &#125;]&#125; 参考: 地址","permalink":"http://www.start6.cn/2020/04/12/javascript/vscode-node-js%E5%BA%94%E7%94%A8%E4%BB%A3%E7%A0%81%E8%B0%83%E8%AF%95/","photos":[]},{"tags":[{"name":"前端","slug":"前端","permalink":"http://www.start6.cn/tags/%E5%89%8D%E7%AB%AF/"}],"title":"你所不知道的模块调试技巧 - npm link","date":"2020/03/23","text":"背景1.0 node 应用开发中，我们不可避免的需要使用或拆分为 npm 模块，经常遇到的一个问题是： 新开发或修改的 npm 模块，如何在项目中试验？ 为了方便示范，我们假设项目是 my-project, 需要用到一个独立的 my-utils 模块 1.1 发布一个 beta 版本 优点：你高兴就好。 缺点： 无趣+无趣+无趣，麻烦+麻烦+麻烦。 1.2 直接用相对路径安装12$ cd path/to/my-project$ npm install path/to/my-utils 优点：简单明了 缺点： 调试过程中往往需要微调，此时需要切换到 my-utils 目录修改，然后反复重新 install，很麻烦 1.3 使用软链12$ cd path/to/my-project/node_modules$ ln -s path/to/my-utils my-utils 优点：软链后，两边修改直接同步 缺点： 指令操作麻烦，不同操作系统语法不一样 2. 正解 - npm link但其实 npm 本身已经对此类情况提供了专门的 npm link 指令。 相关文档： https://docs.npmjs.com/cli/link 下面我们简单介绍下用法： 12$ cd path/to/my-project$ npm link path/to/my-utils 简单的替换一个单词，就搞定了，cool~ 如果这两种的目录不在一起，那还有一种方法： 1234567$ # 先去到模块目录，把它 link 到全局$ cd path/to/my-utils$ npm link$$ # 再去项目目录通过包名来 link$ cd path/to/my-project$ npm link my-utils 该指令还可以用来调试 node cli 模块，譬如需要本地调试我们的 egg-init，可以这样： 1234$ cd path/to/egg-init$ npm link$ # 此时全局的 egg-init 指令就已经指向你的本地开发目录了$ egg-init # 即可 想去掉 link 也很简单： 1$ npm unlink my-utils 3. 写在最后 该方法只是为了最后一步调试，模块本身的正确性，应该更多的通过单元测试来保证。 单元测试相关内容，可以参见：单元测试","permalink":"http://www.start6.cn/2020/03/23/front/%E4%BD%A0%E6%89%80%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E6%A8%A1%E5%9D%97%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7-npm-link/","photos":[]},{"tags":[{"name":"前端","slug":"前端","permalink":"http://www.start6.cn/tags/%E5%89%8D%E7%AB%AF/"}],"title":"RabbitMQ报错(406, \"PRECONDITION_FAILED - parameters for queue 'test_queue' in vhost '/test' not equivalent\")","date":"2020/03/18","text":"报错如下 12345678File &quot;C:\\projects\\project_name\\mq\\rabbitclient.py&quot;, line 26, in __init__self.channel.queue_declare(queue=conf.queue_name)File &quot;C:\\env\\project_name\\lib\\site-packages\\pika\\adapters\\blocking_connection.py&quot;, line 2507, in queue_declareself._flush_output(declare_ok_result.is_ready)File &quot;C:\\env\\project_name\\lib\\site-packages\\pika\\adapters\\blocking_connection.py&quot;, line 1340, in _flush_outputraise self._closing_reason # pylint: disable=E0702pika.exceptions.ChannelClosedByBroker: (406, &quot;PRECONDITION_FAILED - parameters for queue &#x27;test_queue&#x27; in vhost &#x27;/test&#x27; not equivalent&quot;) 代码如下 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253# -*- coding: utf-8 -*- import jsonimport pikaimport Config class RabbitMQClient(object): &quot;&quot;&quot; RabbitMQ Client &quot;&quot;&quot; def __init__(self): conf = Config() credentials = pika.PlainCredentials(conf.rabbit_user, conf.rabbit_password) self.conn = pika.BlockingConnection(pika.ConnectionParameters( host=conf.rabbit_ip, port=conf.rabbit_port, virtual_host=conf.vhost, credentials=credentials )) self.channel = self.conn.channel() self.exchange = conf.exchange self.routing_key = conf.routing_key self.channel.exchange_declare(exchange=self.exchange, exchange_type=&#x27;direct&#x27;, durable=True) self.channel.queue_declare(queue=conf.queue_name) self.channel.queue_bind( queue=conf.queue_name, exchange=self.exchange, routing_key=self.routing_key ) def send(self, msg): try: self.channel.basic_publish( exchange=self.exchange, routing_key=self.routing_key, body=json.dumps(msg), properties=pika.BasicProperties( delivery_mode=2 ) ) except Exception as e: raise e def close(self): self.conn.close() if __name__ == &#x27;__main__&#x27;: client = RabbitMQClient() client.send(exec_info) client.close() 定位问题 12345678我们在声明exchange的时候加了如下参数：durable=True，代表持久化；发布信息的时候加了如下参数：delivery_mode=2，代表持久化消息；我们再看声明queue的时候如何？在rabbitmq中，想要重启后不丢失消息，要为信息加delivery_mode=2参数，只为消息加持久化限制，MQ重启之后，exchange和queue全部丢失，也是不行的，所以也要为exchange和queue做持久化，都是由durable=True控制。所以，修改上述代码第26行如下：self.channel.queue_declare(queue=conf.queue_name, durable=True)再次测试便不报错了。","permalink":"http://www.start6.cn/2020/03/18/front/equivalent/","photos":[]},{"tags":[{"name":"koa","slug":"koa","permalink":"http://www.start6.cn/tags/koa/"}],"title":"Koa-router异步问题","date":"2020/03/12","text":"Koa-router 请求异步问题 参考: 地址 koa-router源码: 地址 通过promise实现 1234567891011121314151617router.get(&#x27;/double&#x27;, function(ctx, next) &#123; return new Promise(function(resolve, reject) &#123;//关键啊，文档中居然没有 setTimeout(function() &#123; ctx.body = &#123;message: &#x27;Hello&#x27;&#125;; //这就是我遇到的问题啊。异步中的ctx.body赋值。 resolve(next()); &#125;, 1); &#125;); &#125;, function(ctx, next) &#123; return new Promise(function(resolve, reject) &#123; setTimeout(function() &#123; ctx.body.message += &#x27; World&#x27;; resolve(next()); &#125;, 1); &#125;); &#125;, function(ctx, next) &#123; ctx.body.message += &#x27;!&#x27;; &#125;);","permalink":"http://www.start6.cn/2020/03/12/front/Koa-router%E5%BC%82%E6%AD%A5%E9%97%AE%E9%A2%98/","photos":[]},{"tags":[{"name":"前端","slug":"前端","permalink":"http://www.start6.cn/tags/%E5%89%8D%E7%AB%AF/"}],"title":".prettierrc文件常见配置","date":"2020/02/26","text":"12345678910111213141516171819202122232425262728293031&#123; // tab缩进大小,默认为2 &quot;tabWidth&quot;: 4, // 使用tab缩进，默认false &quot;useTabs&quot;: false, // 使用分号, 默认true &quot;semi&quot;: false, // 使用单引号, 默认false(在jsx中配置无效, 默认都是双引号) &quot;singleQuote&quot;: false, // 行尾逗号,默认none,可选 none|es5|all // es5 包括es5中的数组、对象 // all 包括函数对象等所有可选 &quot;TrailingCooma&quot;: &quot;all&quot;, // 对象中的空格 默认true // true: &#123; foo: bar &#125; // false: &#123;foo: bar&#125; &quot;bracketSpacing&quot;: true, // JSX标签闭合位置 默认false // false: &lt;div // className=&quot;&quot; // style=&#123;&#123;&#125;&#125; // &gt; // true: &lt;div // className=&quot;&quot; // style=&#123;&#123;&#125;&#125; &gt; &quot;jsxBracketSameLine&quot;: false, // 箭头函数参数括号 默认avoid 可选 avoid| always // avoid 能省略括号的时候就省略 例如x =&gt; x // always 总是有括号 &quot;arrowParens&quot;: &quot;avoid&quot;&#125;","permalink":"http://www.start6.cn/2020/02/26/front/prettierrc%E6%96%87%E4%BB%B6%E5%B8%B8%E8%A7%81%E9%85%8D%E7%BD%AE/","photos":[]},{"tags":[{"name":"前端","slug":"前端","permalink":"http://www.start6.cn/tags/%E5%89%8D%E7%AB%AF/"}],"title":"下载electron失败","date":"2020/02/22","text":"使用npm install electron --verbose查看具体报错原因 mac解决方案: 进入~/.npmrc 解决方案一: taobao镜像下载增加如下内容 1234registry=https://registry.npm.taobao.orgsass_binary_site=https://npm.taobao.org/mirrors/node-sass/phantomjs_cdnurl=http://npm.taobao.org/mirrors/phantomjselectron_mirror=http://npm.taobao.org/mirrors/electron/ 方案二: 进到项目目录 node_modules\\electron\\install.js 找到如下代码并且修改 1234567891011121314// downloads if not cacheddownloadArtifact(&#123; version, artifactName: &#x27;electron&#x27;, force: process.env.force_no_cache === &#x27;true&#x27;, cacheRoot: process.env.electron_config_cache, platform: process.env.npm_config_platform || process.platform, arch: process.env.npm_config_arch || process.arch, //添加如下代码， mirrorOptions:&#123; mirror: &#x27;https://npm.taobao.org/mirrors/electron/&#x27;, customDir: version &#125;&#125;).then((zipPath) =&gt; extractFile(zipPath)).catch((err) =&gt; onerror(err)) 再次用终端打开 项目目录下的 node_modules\\electron 运行 node install.js 完美解决","permalink":"http://www.start6.cn/2020/02/22/front/%E4%B8%8B%E8%BD%BDelectron%E5%A4%B1%E8%B4%A5/","photos":[]},{"tags":[{"name":"工具","slug":"工具","permalink":"http://www.start6.cn/tags/%E5%B7%A5%E5%85%B7/"}],"title":"angular打包错误ERROR in Illegal State issue when giving angular build","date":"2020/02/19","text":"执行 ng build –prod 错误描述: 1ERROR in Illegal State: referring to a type without a variable &#123;&quot;filePath&quot;:&quot;/home/jenkins/agent/workspace/smartcampus/frontend/smartcampus-school-pc-cn-develop/node_modules/ng-zorro-antd/table/ng-zorro-antd-table.d.ts&quot;,&quot;name&quot;:&quot;NzTrDirective&quot;,&quot;members&quot;:[]&#125; 解决方案: 文件 1tsconfig.json -&gt; fullTemplateTypeCheck-&gt;false 继续执行 ng build –prod 根据提示修改对应错误","permalink":"http://www.start6.cn/2020/02/19/angular/angular%E6%89%93%E5%8C%85%E9%94%99%E8%AF%AFERROR-in-Illegal-State-issue-when-giving-angular-build/","photos":[]},{"tags":[{"name":"工具","slug":"工具","permalink":"http://www.start6.cn/tags/%E5%B7%A5%E5%85%B7/"}],"title":"Mac系统上安装FFmpeg","date":"2020/02/18","text":"1.下载FFmpeg先进入要存放下载文件的目录，比如要放在/Users/qinjian/Downloads/ffm目录，先执行命令： script1cd /Users/qinjian/Downloads/ffm 再执行下载的命令： script1git clone https://git.ffmpeg.org/ffmpeg.git 2.编译FFmpeg先执行下面命令进入ffmpeg目录： script1cd /Users/qinjian/Downloads/ffm/ffmpeg 再执行下面命令配置configure： script1./configure --prefix=/usr/local/ffmpeg --enable-gpl --enable-nonfree --enable-libfdk-aac --enable-libx264 --enable-libx265 --enable-filter=delogo --enable-debug --disable-optimizations --enable-libspeex --enable-videotoolbox --enable-shared --enable-pthreads --enable-version3 --enable-hardcoded-tables --cc=clang --host-cflags= --host-ldflags= 如果报错nasm/yasm not found or too old. Use --disable-x86asm for a crippled build的话，先执行下面命令安装yasm然后再执行配置configure的命令。 script1brew install yasm 如果报错ERROR: libfdk_aac not found的话，先执行下面命令安装fdk-aac然后再执行配置configure的命令。 script1brew install fdk-aac 3.安装FFmpeg执行下面命令来安装： script1234make &amp;&amp; make install// 如果安装出现下图的错误的话就用这条命令来安装sudo make &amp;&amp; sudo make install 安装成功后ffmpeg所在的目录是/usr/local/ffmpeg。 4.配置环境变量安装成功后要输入ffmpeg的全路径才能调用ffmpeg命令： script1/usr/local/ffmpeg/bin/ffmpeg -version 我们可以配置环境变量，配置环境变量后可以直接通过ffmpeg -version来调用命令。先执行下面命令打开环境变量配置文件 script1vi ~/.bash_profile 在配置文件加入ffmpeg的bin文件夹路径： script1export PATH=$PATH:/usr/local/ffmpeg/bin 然后输入:wq保存退出，再执行下面命令让刚配置的环境变量生效： script1source ~/.bash_profile 其他参考: 地址","permalink":"http://www.start6.cn/2020/02/18/tool/Mac%E7%B3%BB%E7%BB%9F%E4%B8%8A%E5%AE%89%E8%A3%85FFmpeg/","photos":[]},{"tags":[{"name":"前端","slug":"前端","permalink":"http://www.start6.cn/tags/%E5%89%8D%E7%AB%AF/"}],"title":"WebStorm2019 Mac版破解","date":"2020/02/17","text":"参考: 地址","permalink":"http://www.start6.cn/2020/02/17/front/WebStorm2019-Mac%E7%89%88%E7%A0%B4%E8%A7%A3/","photos":[]},{"tags":[{"name":"工具","slug":"工具","permalink":"http://www.start6.cn/tags/%E5%B7%A5%E5%85%B7/"}],"title":"Mac 下chromium缺少Google API 密钥，因此 chromium的部分功能将无法使用","date":"2020/02/09","text":"chromium 使用登录功能需要配置 GoogleAPI 密钥，相关获取方式可以自动搜索 本文主要讲述 Mac 下配置 如果缺失无法登陆谷歌账号，Chrome 的书签同步功能无法使用； 解决方案： 第一步 1mv /Applications/Chromium.app/Contents/MacOS/Chromium /Applications/Chromium.app/Contents/MacOS/Chromium_bin 第二步vi /Applications/Chromium.app/Contents/MacOS/Chromium 123456789#!/bin/bash# Set up environment variablesexport GOOGLE_API_KEY=&quot;xxxxxxx&quot;export GOOGLE_DEFAULT_CLIENT_ID=&quot;xxxxxxx&quot;export GOOGLE_DEFAULT_CLIENT_SECRET=&quot;xxxxxx&quot;# Launch Chromium/Applications/Chromium.app/Contents/MacOS/Chromium_bin 第三步chmod +x /Applications/Chromium.app/Contents/MacOS/Chromium 完成 参考文档：https://gist.github.com/cvan/44a6d60457b20133191bd7b104f9dcc4","permalink":"http://www.start6.cn/2020/02/09/tool/Mac-%E4%B8%8Bchromium%E7%BC%BA%E5%B0%91Google-API-%E5%AF%86%E9%92%A5%EF%BC%8C%E5%9B%A0%E6%AD%A4-chromium%E7%9A%84%E9%83%A8%E5%88%86%E5%8A%9F%E8%83%BD%E5%B0%86%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8/","photos":[]},{"tags":[{"name":"前端","slug":"前端","permalink":"http://www.start6.cn/tags/%E5%89%8D%E7%AB%AF/"}],"title":"taro多端开发","date":"2020/01/29","text":"taro 多端开发应用在线预览地址 H5 地址 egg 后台 问题总结: egg 跨域: 步骤一： # 下载 egg-cors 包 npm i egg-cors --save 步骤二： # 在plugin.js中设置开启cors exports.cors = &#123; enable: true, package: &#39;egg-cors&#39;, &#125;; 步骤三： # 在config.&#123;env&#125;.js中配置，注意配置覆盖的问题 config.security = &#123; csrf: &#123; enable: false, ignoreJSON: true &#125;, domainWhiteList: &#39;*&#39; &#125;; config.cors = &#123; origin:&#39;*&#39;, allowMethods: &#39;GET,HEAD,PUT,POST,DELETE,PATCH&#39; &#125;; 今日头条接口 首页顶部 tabs 接口: https://api3-normal-c-lf.snssdk.com/article/category/get_subscribed/v4/?iid=101398257036&amp;device_id=66877782274&amp;ac=wifi&amp;mac_address=A4%3A50%3A46%3ACD%3A3D%3AAB&amp;channel=xiaomi&amp;aid=13&amp;app_name=news_article&amp;version_code=757&amp;version_name=7.5.7&amp;device_platform=android&amp;ab_version=1251921%2C662099%2C1407070%2C668774%2C1396152%2C1445075%2C765196%2C821967%2C857803%2C660830%2C1439346%2C1397711%2C1243993%2C1434500%2C1379677%2C662176%2C1378615%2C801968%2C1419048%2C668775%2C1190524%2C1157750%2C1419597%2C1439625%2C1422304%2C1428576%2C668779%2C759656%2C1388002&amp;ab_feature=94563%2C102749&amp;ssmix=a&amp;device_type=MI+8&amp;device_brand=Xiaomi&amp;language=zh&amp;os_api=28&amp;os_version=9&amp;uuid=869832047288317&amp;openudid=c836b6236d8fcd86&amp;manifest_version_code=7571&amp;resolution=1080*2029&amp;dpi=440&amp;update_version_code=75717&amp;_rticket=1580206995760&amp;plugin=18762&amp;pos=5r_-9Onkv6e_eCopeCA7eyoLeC0JeCUfv7G_8fLz-vTp6Pn4v6esraSzrKuvrq6tqaWtr66uqqWxv_H86fTp6Pn4v6eprLOpqqqrrqWrq6uprKqlpbG__PD87d706eS_p794Kil4IDt7Kgt4LQl4JR-_sb_88Pzt0fLz-vTp6Pn4v6esraSzrKuvrq6tqaWtr66uqqWxv_zw_O3R_On06ej5-L-nqayzqaqqq66lq6urqayqpaXg&amp;rom_version=miui_v11_v11.0.4.0.peacnxm&amp;cdid=ee711002-293a-4f81-8060-8ffa05e9a76f&amp;oaid=4aea438a0899600d 首页顶部-&gt;推荐接口: https://api3-normal-c-lf.snssdk.com/api/news/feed/v88/ 开源中国接口 综合-&gt;顶部-&gt;软件: 列表: https://h5.oschina.net/apiv3/projectRecommend?size=20&amp;page=1 详情: https://h5.oschina.net/project/detail/50356 京东万象 api 接口 api 地址: 新闻","permalink":"http://www.start6.cn/2020/01/29/front/taro%E5%A4%9A%E7%AB%AF%E5%BC%80%E5%8F%91/","photos":[]},{"tags":[{"name":"前端","slug":"前端","permalink":"http://www.start6.cn/tags/%E5%89%8D%E7%AB%AF/"}],"title":"从0实现react","date":"2020/01/23","text":"项目地址: 项目地地址参考地址: bilibili 1231.下载nodejs2.下载脚手架: npm install create-react-app -g3.创建项目:create-react-app react-test 1.火热的0配置的打包工具parcel 地址: parcel官网 2.安装babel插件,将jsx语法转换成js对象(虚拟DOM) npm install babel-core babel-preset-env babel-plugin-transform-react-jsx --save-dev babel官网 3.组件和生命周期 4.diff算法 diff算法(待完成) 如何减少DOM更新: 我们需要找出渲染前后真正变化的部分,只更新这一部分,而对比变化，找出需要更新部分的算法称之为diff算法 对比策略: 在前面我们实现了_render方法,它能够将虚拟DOM转换成真正的DOM 但是我们需要改进它,不要让它傻乎乎的重新渲染整个DOM树,而是找出真正变化的部门进行替换。 这部门很多类似React框架实现方式都不太一样，有的框架会选择保存上次渲染的虚拟DOM，然后对比虚拟DOM前后的变化，得到一系列更新的数据，然后再将这些更新应用到真正的DOM上。 我们会选择直接对比虚拟DOM和真实DOM，这样就不需要额外保存上一次渲染的虚拟DOM，并且能够一边对比一边更新，这也是我们选择的方式。** 不管是DOM还是虚拟DOM，他们的结构都是一棵树，完全对比两棵树变化的算法时间复杂度是0(n^3),但是考虑到我们很少会跨层级移动DOM，所以我们只需要对比同一层级的变化。 只需要对比同一颜色框内的节点 总而言之，我们的diff算法有两个原则 对比当前真实的DOM和虚拟DOM，再对比过程中直接更新真实DOM 只对比同一层级的变化 5.异步的setState babel 官网","permalink":"http://www.start6.cn/2020/01/23/react/%E4%BB%8E0%E5%AE%9E%E7%8E%B0react/","photos":[]},{"tags":[{"name":"前端","slug":"前端","permalink":"http://www.start6.cn/tags/%E5%89%8D%E7%AB%AF/"}],"title":"Vue3.0响应式原理","date":"2020/01/22","text":"实现方法: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198// Vue3.0 响应式原理// 1). 2.0默认会递归(数据尽量扁平化) 2). 2.0数组改变length是无效的 3). 2.0对象不存在的属性不能被拦截// proxy 兼容性差 ie11不兼容let toProxy = new WeakMap(); // 弱引用映射表 es6 放置的是 原对象:代理过的对象let toRaw = new WeakMap(); // 被代理过得对象:原对象// 判断是不是对象function isObject(val) &#123; return typeof val === &quot;object&quot; &amp;&amp; val !== null;&#125;// 判断对象有没有属性function hasOwn(target, key) &#123; return target.hasOwnProperty(key);&#125;// 响应式的核心方法function reactive(target) &#123; // 创建响应式对象 return createReactiveObject(target);&#125;// 创建响应式对象function createReactiveObject(target) &#123; if (!isObject(target)) &#123; // 如果当前不是对象， 直接返回 return target; &#125; // 如果已经代理过了，就将代理过得结果返回; let proxy = toProxy.get(target); if (proxy) &#123; return proxy; &#125; // 防止代理过得对象再次被代理 if (toRaw.has(target)) &#123; return target; &#125; let baseHandler = &#123; // reflect 优点: 不会报错，而且会有返回值，会替代掉Object上的方法 // target - 源对象, key - 键值, receiver - 新的proxy代理对象 get(target, key, receiver) &#123; // 收集依赖 订阅 把当前的key和这个effect对应起来 track(target, key); // 如果目标上的 这个key变化 从新让数组中的effect执行即可 // console.log(&#x27;获取&#x27;); // proxy + reflect 反射 let result = Reflect.get(target, key, receiver); // result 是当前获取到的值 return isObject(result) ? reactive(result) : result; // 是个递归 // return target[key]; &#125;, set(target, key, value, receiver) &#123; // 怎么去 识别改属性 还是新增属性 let hasKey = hasOwn(target, key); // 判断这个属性 以前有没有 // console.log(key, value); // console.log(&#x27;设置&#x27;); let oldValue = target[key]; let res = Reflect.set(target, key, value, receiver); // 返回boolean值 if (!hasKey) &#123; trigger(target, &quot;add&quot;, key); console.log(&quot;新增属性&quot;); &#125; else if (oldValue !== value) &#123; // 表示属性更改了 trigger(target, &quot;set&quot;, key); console.log(&quot;修改属性&quot;); &#125; // 为了屏蔽无意义的修改 return res; // target[key] = value; //缺点 如果设置没成功 如果这个对象不可以被更改(writable) - 没有返回值 &#125;, deleteProperty(target, key) &#123; let res = Reflect.deleteProperty(target, key); console.log(&quot;删除&quot;); return res; &#125; &#125;; let observed = new Proxy(target, baseHandler); // es6 // 需要记录一下 如果这个对象代理过了 就不要再new了 // hash表 映射表 &#123;key=&gt;value&#125; toProxy.set(target, observed); toRaw.set(observed, target); return observed;&#125;// let obj = &#123;// name: &#x27;zk&#x27;// &#125;// 代理对象let proxy = reactive(&#123; name: &quot;zk&quot;, // 多层代理 通过get方法来判断 info: &#123; n: 10 &#125;&#125;);// reactive(proxy);// reactive(obj);// proxy.name = &#x27;改变的值zk&#x27;;// proxy.info.n = 300// console.log(proxy.name);// console.log(proxy.info.n);// delete proxy.name;// console.log(proxy.name);// proxy.a// proxy.name = &#x27;改变的值&#x27;;// delete proxy.name;// let arr = [1, 2, 3]// let proxyArr = reactive(arr)// proxyArr.push(4)// proxyArr.length = 4;// 栈 先进后出&#123;name:[effect]&#125;let activeEffectStacks = []; // 栈型结果// 数据结构// &#123;// target: &#123;// key: [fn, fn]// &#125;// &#125;let targetsMap = new WeakMap(); // 集合和hash表function track(target, key) &#123; // 如果这个target中的key变化了 我就执行数组里的方法 let effect = activeEffectStacks[activeEffectStacks.length - 1]; if (effect) &#123; // 有对应关系 才创建关联 let depsMap = targetsMap.get(target); if (!depsMap) &#123; targetsMap.set(target, (depsMap = new Map())); &#125; let deps = depsMap.get(key); if (!deps) &#123; depsMap.set(key, (deps = new Set())); &#125; if (!deps.has(effect)) &#123; deps.add(effect); &#125; // 动态创建依赖关系 &#125; // 什么都不做&#125;function trigger(target, type, key) &#123; let depsMap = targetsMap.get(target); if (depsMap) &#123; let deps = depsMap.get(key); if (deps) &#123; // 将当前key对应的effect依次执行 deps.forEach(effect =&gt; &#123; effect(); &#125;); &#125; &#125;&#125;// 响应式副作用function effect(fn) &#123; // 需要把fn这个函数变成响应式的函数 let effect = createReactiveEffect(fn); effect(); // 默认 应该先执行一次&#125;function createReactiveEffect(fn) &#123; let effect = function() &#123; // 这个就是创建的响应式的effect return run(effect, fn); // 1.让fn执行 2.把这个effect存到栈中 &#125;; return effect;&#125;function run(effect, fn) &#123; // 运行fn, 并且将effect存起来 try &#123; activeEffectStacks.push(effect); fn(); // vue2 利用了js是单线程的 &#125; finally &#123; activeEffectStacks.pop(); &#125;&#125;// 依赖收集 发布订阅let obj = reactive(&#123; name: &quot;zk&quot;&#125;);effect(() =&gt; &#123; // effect 会执行两次 默认先执行一次 之后依赖的数据发生变化了 会再次执行 console.log(obj.name, &quot;effect&quot;); // 会调用get方法&#125;);obj.name = &quot;更改哦1&quot;; 参考资料: Vue3.0 响应式原理第二节 参考资料: Vue 作者尤雨溪为你分享：Vue 3.0 进展@VueConf CN 2018 参考资料: 尤雨溪教你写 vue 高级 vue 教程 源码分析","permalink":"http://www.start6.cn/2020/01/22/vue3/Vue3-0%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86/","photos":[]},{"tags":[{"name":"前端","slug":"前端","permalink":"http://www.start6.cn/tags/%E5%89%8D%E7%AB%AF/"}],"title":"vue2.0响应式原理实现(对象,数组)","date":"2020/01/22","text":"Vue2.0 响应式原理实现(对象，数组) 具体实现: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394// Vue2.0如何实现响应式原理// 拿到原来原型上的方法let oldArrayPrototype = Array.prototype;// 创建新的实例，获取原型所有方法，以免影响原型方法。let propto = Object.create(oldArrayPrototype); // 继承[&quot;push&quot;, &quot;shift&quot;, &quot;unshift&quot;].forEach(method =&gt; &#123; propto[method] = function() &#123; // 函数劫持, 把函数进行重写 内部调用原来的方法 // call参考地址: https://blog.csdn.net/mandyucan/article/details/80820139 updateView(); // 切片编程 oldArrayPrototype[method].call(this, ...arguments); &#125;;&#125;);function observer(target) &#123; // 判断是否是对象 if (typeof target !== &quot;object&quot; || target === null) &#123; return target; &#125; // 判断是否是数组 if (Array.isArray(target)) &#123; // 拦截数组 给数组的方法进行重写 // 兼容写法 https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf Object.setPrototypeOf(target, propto); // target.__proto__ = propto &#125; // 重新定义属性，方法 for (let key in target) &#123; defineReactive(target, key, target[key]); &#125;&#125;function defineReactive(target, key, value) &#123; // 值的类型可能为对象属性，继续拦截,处理 observer(value); Object.defineProperty(target, key, &#123; get() &#123; // get进行依赖收集 return value; &#125;, set(newValue) &#123; if (newValue !== value) &#123; // 从新定义值可能为对象属性，处理 observer(value); updateView(); value = newValue; &#125; &#125; &#125;);&#125;// 数据变化可以更新视图function updateView() &#123; console.log(&quot;更新视图&quot;);&#125;// 使用Object.defineProperty 就是可以重新定义属性,给属性增加getter和setter// 问题1: 对象层级嵌套太深 递归影响性能// 问题2: 如果属性不存在，新增的属性不会是响应式的// 对象let data = &#123; name: &quot;zf&quot;, age: &#123; n: 200 &#125;&#125;;// 观察数据observer(data);data.name = &quot;jw&quot;;data.age.n = 300;// data.age = &#123;// n: 100// &#125;;// data.age.n = 400;console.log(data.name);console.log(data.age.n);// 数组let array = &#123; name: &quot;zk&quot;, age: [1, 2, 3]&#125;;observer(array);array.age.push(4); // 需要对数组上的方法进行重写 push、shift、unshift、pop、reverseconsole.log(array.age); 参考地址: vue3.0 源码实现原理第一节","permalink":"http://www.start6.cn/2020/01/22/vue2/vue2-0%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86%E5%AE%9E%E7%8E%B0-%E5%AF%B9%E8%B1%A1-%E6%95%B0%E7%BB%84/","photos":[]},{"tags":[{"name":"前端","slug":"前端","permalink":"http://www.start6.cn/tags/%E5%89%8D%E7%AB%AF/"}],"title":"【ES6基础】Map与WeakMap","date":"2020/01/22","text":"Map 常用方法示例 操作方法 内容描述 map.set(key,value) 添加键值对到映射中 map.get(key) 获取映射中某一个键的对应值 map.delete(key) 将某一键值对移除映射 Map.clear() 清空映射中所有键值对 map.entries() 返回一个以二元数组（键值对）作为元素的数组 map.has(key) 检查映射中是否包含某一键值对 map.keys() 返回一个当前映射中所有键作为元素的可迭代对象 map.values() 返回一个当前映射中所有值作为元素的可迭代对象 map.size 映射中键值对的数量 Map 与 Object 的区别 对比项 映射对象 Map Object 对象 存储键值对 √ √ 遍历所有的键值对 √ √ 检查是否包含指定的键值对 √ √ 使用字符串作为键 √ √ 使用 Symbol 作为键 √ √ 使用任意对象作为键 √ 可以很方便的得知键值对的数量 √ WeakMap 与集合类型（Set）一样，映射类型也有一个 Weak 版本的 WeakMap。WeakMap 和 WeakSet 很相似，只不过 WeakMap 的键会检查变量的引用，只要其中任意一个引用被释放，该键值对就会被删除。 以下三点是 Map 和 WeakMap 的主要区别： Map 对象的键可以是任何类型，但 WeakMap 对象中的键只能是对象引用 WeakMap 不能包含无引用的对象，否则会被自动清除出集合（垃圾回收机制) WeakSet 对象是不可枚举的，无法获取大小 下段代码示例验证了 WeakMap 的以上特性： 123456789101112131415161718192021222324252627let weakmap = new WeakMap();(function() &#123; let o = &#123; n: 1 &#125;; weakmap.set(o, &quot;A&quot;);&#125;)(); // here &#x27;o&#x27; key is garbage collectedlet s = &#123; m: 1 &#125;;weakmap.set(s, &quot;B&quot;);console.log(weakmap.get(s));console.log(...weakmap); // exception thrownweakmap.delete(s);weakmap.clear(); // Exception, no such functionlet weakmap_1 = new WeakMap([ [&#123;&#125;, 2], [&#123;&#125;, 5]]); //this worksconsole.log(weakmap_1.size); //undefined”// --------------分割线--------------const weakmap = new WeakMap();let keyObject = &#123; id: 1 &#125;;const valObject = &#123; score: 100 &#125;;weakmap.set(keyObject, valObject);console.log(weakmap.get(keyObject));//output &#123; score: 100 &#125;keyObject = null;console.log(weakmap.has(keyObject));//output false 小结今天的内容就介绍到这里，我们明白了 Map 是一个键值对的映射对象，相比 Object 来说可以使用任何键做为键值，并且能够很方便的获取键值对。WeakMap 相对于 Map 是一个不可枚举的对象，必须使用对象作为键值。如何更好的使用 Map 和 WeakMap 还需要具体结合我们实际的业务场景进行灵活使用。 参考资料: Map 与 WeakMap","permalink":"http://www.start6.cn/2020/01/22/javascript/%E3%80%90ES6%E5%9F%BA%E7%A1%80%E3%80%91Map%E4%B8%8EWeakMap/","photos":[]},{"tags":[{"name":"前端","slug":"前端","permalink":"http://www.start6.cn/tags/%E5%89%8D%E7%AB%AF/"}],"title":"直播管理","date":"2020/01/20","text":"在线教育直播系统基础结构App直播端(react-native): 技术栈:react-native、redux(状态管理)、typescript、react-navigation(导航)、react-native-storage(全局状态存储)、react-native-vector-icons(图标)、socket.io-client(实时聊天)、axios(网络请求) gitlab地址: 直播端 页面结构: android(android项目) ios(ios项目) src config(项目配置信息) model(interface接口) navigation(导航) pages(页面) auth(首次加载页面、鉴权页面、登录页面) home(直播页面) store(redux全局状态管理) utils(工具信息) request(请求处理axios) common(公共的方法) constant(常量列表) data-stored(本地数据存储) 实现功能: 登录功能, 直播功能, 可以查看客户端发送的消息,消息列表 App客户端(ionic) 技术栈: ionic、cordova、flv播放器、socket.io-client Gitlab地址: 客户端app 页面结构: src config(配置信息) guard(路由鉴权) pages(页面) login(登录页面) video(播放界面) service(服务) permissions(登录逻辑、用户信息获取) request(http请求) utils(工具类) Constant.ts(常量列表) tabs(导航) 实现功能 获取指定部门 人员的直播列表，播放直播，直播互动，可以发送消息，消息列表。 直播端后台管理(angular) 技术栈: angular、ng-alain(基于脚手架创建项目,使用了@delon扩展包)、flv播放器、rxjs gitlab地址: 后台管理 页面结构 src app config(配置信息) core(核心模块-&gt;只会被导入一次) layout(页面布局,header,footer,content) routes(页面路由) live(直播管理) sys(系统管理) department(部门管理) role(角色管理) user(用户管理) service(服务) shared(共享模块) 实现功能: 部门(增删改)、角色(增删改)、用户(增删改)、直播管理（超级管理员进去查看所有人的直播状态,在线人数、观看次数 )、部门管理员进入只能查看新增 用户、自己部门直播实时状态 Node流媒体直播服务 技术栈: node-media-server、axios、moment gitlab地址: node流媒体服务器 页面结构: app.js(流媒体入口) Auth_app.js(用户认证) Mp4_app.js(本地配置存储mp4) Multi_app(开启服务启动多核) 实现功能: 推流、拉流。 实现监控 (连接、断开，开启推送、结束推送)直播流，播放流 后台管理(egg) 技术栈: egg、egg-cors(跨域)、egg-jwt(jwt)、egg-mongoose(mongo数据库)、egg-redis(redis)、egg-socket.io(socket.io)、egg-validate(post请求参数校验) gilab地址: 后台 页面结构: app controller(请求参数处理) extend(扩展配置) helper(辅助处理相应，返回数据格式) io(socket.io) controller(处理exange(发送消息事件)) middleware(中间件,拦截sock消息处理，加入房间，在线人数，离开房间) middleware(错误处理中间件) model(mongo模型) public(静态资源) service(服务，处理和数据库交互) router(路由) config(配置) config.default.js(默认配置) plugin.js(插件配置) 实现功能: 角色管理、权限管理、用户管理、文件上传、部门管理、直播信息统计、观看人数、直播单条数据、socket.io实现p2p聊天","permalink":"http://www.start6.cn/2020/01/20/front/%E7%9B%B4%E6%92%AD%E7%AE%A1%E7%90%86/","photos":[]},{"tags":[{"name":"其他","slug":"其他","permalink":"http://www.start6.cn/tags/%E5%85%B6%E4%BB%96/"}],"title":"gitlab代码量统计","date":"2020/01/19","text":"使用python统计gitlab每个人的代码量汇总，按项目汇总码云地址","permalink":"http://www.start6.cn/2020/01/19/other/gitlab%E4%BB%A3%E7%A0%81%E9%87%8F%E7%BB%9F%E8%AE%A1/","photos":[]},{"tags":[{"name":"前端","slug":"前端","permalink":"http://www.start6.cn/tags/%E5%89%8D%E7%AB%AF/"}],"title":"(转)vscode使用编程字体","date":"2020/01/18","text":"—开源中国地址—","permalink":"http://www.start6.cn/2020/01/18/front/%E8%BD%AC-vscode%E4%BD%BF%E7%94%A8%E7%BC%96%E7%A8%8B%E5%AD%97%E4%BD%93/","photos":[]},{"tags":[{"name":"前端","slug":"前端","permalink":"http://www.start6.cn/tags/%E5%89%8D%E7%AB%AF/"}],"title":"个人vscode配置setting.json","date":"2020/01/14","text":"{“workbench.iconTheme”: “material-icon-theme”,“editor.fontSize”: 18,//字体文件“editor.fontFamily”: “JetBrains Mono”,“editor.formatOnSave”: true,“java.configuration.checkProjectSettingsExclusions”: false,“typescript.updateImportsOnFileMove.enabled”: “never”,“cSpell.enabledLanguageIds”: [“asciidoc”,“c”,“cpp”,“csharp”,“css”,“git-commit”,“go”,“handlebars”,“haskell”,“html”,“jade”,“java”,“javascriptreact”,“json”,“jsonc”,“latex”,“less”,“markdown”,“php”,“plaintext”,“pug”,“python”,“restructuredtext”,“rust”,“scala”,“scss”,“text”,“typescript”,“typescriptreact”,“yaml”,“yml”],“javascript.updateImportsOnFileMove.enabled”: “always”,“[typescriptreact]”: {},“editor.tabSize”: 2,“editor.detectIndentation”: false, // 全部统一成 2 空格缩进“eslint.enable”: true, //是否开启 vscode 的 eslint“editor.codeActionsOnSave”: {“source.fixAll.eslint”: true},“eslint.options”: { //指定 vscode 的 eslint 所处理的文件的后缀“extensions”: [“.js”,“.jsx”,“.ts”,“.tsx”]},“eslint.validate”: [ //确定校验准则“javascript”,“javascriptreact”,“html”,“typescript”,“typescriptreact”],“search.followSymlinks”: false,“files.exclude”: {“/.git”: true,“/.svn”: true,“/.hg”: true,“/CVS”: true,“/.DS_Store”: true,“/tmp”: true,// “/node_modules”: true,“/bower_components”: true,// “/dist”: true},“files.watcherExclude”: {“/.git/objects/“: true,“/.git/subtree-cache/“: true,// “/node_modules/“: true,“/tmp/“: true,“/bower_components/“: true,“/dist/**“: true},“explorer.confirmDelete”: false}","permalink":"http://www.start6.cn/2020/01/14/front/%E4%B8%AA%E4%BA%BAvscode%E9%85%8D%E7%BD%AEsetting-json/","photos":[]},{"tags":[{"name":"前端","slug":"前端","permalink":"http://www.start6.cn/tags/%E5%89%8D%E7%AB%AF/"}],"title":"code-push","date":"2020/01/14","text":"code-push 常用命令安装: npm install -g code-push-cli注册账号: code-push register登陆: code-push login注销: code-push logout添加项目: code-push app add [app 名称]删除项目: code-push app remove [app 名称]列出账号下的所有项目: code-push app list显示登陆的 token: code-push access-key ls删除某个 access-key: code-push access-key rm 添加协作人员：code-push collaborator add next@126.com部署一个环境: code-push deployment add 删除部署: code-push deployment rm 列出应用的部署: code-push deployment ls 查询部署环境的 key: code-push de ployment ls -k查看部署的历史版本信息: code-push deployment history 重命名一个部署: code-push deployment rename 打包 bundle 包 react-native bundle –entry-file index.js –bundle-output ./bundle/android/index.android.bundle –platform android –assets-dest ./bundle/android –dev false发布更新版本 (直接推送到生产环境) code-push release-react newDemo android -t 1.0.0 –dev false –d Production –des “这是第一个” -m true2.cordova 常用命令// 发布 Staging 版本$ code-push release-cordova ios // 发布 Production 版本$ code-push release-cordova ios -d Production // 查看已发布的版本$ code-push deployment ls -k //给 app 在热更新服务器上创建应用code-push app add //删除应用code-push app rm //查看热更新服务器上有哪些应用code-push app list //发布应用code-push release-cordova [options]Options 参数:–deploymentName, -d ..指定部署的类型.默认”Staging”,可以选择”Production”或其他 自定义类型–description, –des ..添加描述–mandatory, -m …….指定此版本是否为强制更新版本例 1:发布更新code-push release-cordova ionic2_tabs_android android –des “”例 2:部署”Production”状态的更新,即生产环境的热更新部署使用这句命令code-push release-cordova ionic2_tabs_android android -d “Production” –des “”注意:一般生产环境的 app 是压缩过的,所以在发布正式环境热更新之前,先执行”ionic build –prod”压缩代码例 3:部署 ios 应用的更新code-push release-cordova ionic2_tabs_ios ios –des “”例 4:添加-m 参数强制更新,code-push 插件从服务端下载完代码,会立即自动重启 appcode-push release-cordova ionic2_tabs_android android -m –des “” //查看部署状态code-push deployment list 例 1:code-push deployment list ionic2_tabs_android例 2:查看部署状态及 key 值,忘记 key 就这样找code-push deployment list ionic2_tabs_android -k //清空部署记录code-push deployment clear 如:清空 Staging 状态的部署记录code-push deployment clear ionic2_tabs_android Staging //添加部署状态,默认只有”Staging”和”Production”两中状态code-push deployment add [deploymentName] //删除自定义的部署状态code-push deployment rm","permalink":"http://www.start6.cn/2020/01/14/react-native/code-push/","photos":[]},{"tags":[{"name":"前端","slug":"前端","permalink":"http://www.start6.cn/tags/%E5%89%8D%E7%AB%AF/"}],"title":"Vue3.0源码解读","date":"2020/01/14","text":"Vue3.0 源码解读 参考资料 Es6 系列之 Proxy-简书 Vue 3.0 源码逐行解析（一）：响应式模块（1） vue-cli 源码分析","permalink":"http://www.start6.cn/2020/01/14/vue3/Vue3-0%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/","photos":[]},{"tags":[],"title":"树莓派(宝塔、frp)","date":"2020/01/13","text":"记录 树莓派安装frp客户端 地址:1.参考地址2.启动报错参考 frp 后台启动: 地址1地址2 树莓派安装宝塔 宝塔面板5.9版本linux系统安装命令(Ubuntu/Deepin) 1wget -O install.sh http://download.bt.cn/install/install-ubuntu.sh &amp;&amp; sudo bash install.sh 地址: 参考地址 树莓派关在移动硬盘地址: 参考地址","permalink":"http://www.start6.cn/2020/01/13/tool/%E6%A0%91%E8%8E%93%E6%B4%BE-%E5%AE%9D%E5%A1%94%E3%80%81frp/","photos":[]},{"tags":[],"title":"ionic请求jira接口","date":"2020/01/12","text":"记录 背景: jira项目 手机端app展示、统计项目信息。接口请求采用cookie、session认证方式 手机端: 采用angular+ionic 搭建app、接口请求采用httpClient。 遇到的问题: 手机端访问时候 跨域, cookie无法携带到请求头。 解决方案: 1.登录成功存储本地cookie(必须设置路径为/) 12// 设置登录的cooikedocument.cookie = `JSESSIONID=25911C87CD11A87ADE4874F11679A2E4;path=/`; 2.请求接口时设置 12const headers = [&#123; &#x27;Content-Type&#x27;: &#x27;application/json&#x27; &#125;]const headerOptions = &#123;headers,withCredentials:true&#125; 参考链接: js cookie 的路径以及 Cookie 域 cookie跨域问题","permalink":"http://www.start6.cn/2020/01/12/ionic/ionic%E8%AF%B7%E6%B1%82jira%E6%8E%A5%E5%8F%A3/","photos":[]},{"tags":[],"title":"app分发平台","date":"2020/01/11","text":"记录 为方便公司内部 app 版本统一管理,根据开源项目本地部署: 开源地址 采坑记录 1.安装依赖报错 12345internal/util/inspect.js:31const types = internalBinding(&#x27;types&#x27;);ReferenceError: internalBinding is not defined 错误原因：这个问题是我将 node 版本升级至 v10.15.0，npm 升级至 6.4.1 后出现的，在此之前，我的 node 版本是 8+，没有出现这个问题。 解决方案: 升级下 native 这个插件的版本即可 ​ npm install natives@1.1.6 错误原地址:地址 2.pm2 启动后台服务报错 解决方案: 在 server 根目录新增app.js，添加如下内容 123require(&quot;babel-register&quot;);require(&quot;babel-polyfill&quot;);require(&quot;./index.js&quot;); 然后再执行pm2 start app.js即可 解决方案原地址:地址 3.nginx 配置 upload 文件下载 404 正确配置: 12345678910111213141516171819202122location / &#123; try_files $uri $uri/ @router; index index.html; root /www/wwwroot/app.start6.cn/dist; &#125; location /upload &#123; #该root目录为根目录下config.json文件里dir目录 上传的apk和ipa文件当作静态文件处理 alias /apk/upload; &#125; location @router &#123; # vue的router配置 rewrite ^.*$ /index.html last; &#125; location /api/ &#123; #把以api打头的接口转发给后端server proxy_pass http://127.0.0.1:9898; #这里端口修改为后端服务运行的端口 proxy_set_header Host $host; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; &#125; client_max_body_size 208M; #最大上传的ipa/apk文件大小","permalink":"http://www.start6.cn/2020/01/11/tool/app%E5%88%86%E5%8F%91%E5%B9%B3%E5%8F%B0/","photos":[]},{"tags":[],"title":"动态表单实现","date":"2019/10/04","text":"angular动态表单地址: angular表单 vue动态表单地址: vue表单","permalink":"http://www.start6.cn/2019/10/04/angular/%E5%8A%A8%E6%80%81%E8%A1%A8%E5%8D%95%E5%AE%9E%E7%8E%B0/","photos":[]}],"categories":[],"tags":[{"name":"前端","slug":"前端","permalink":"http://www.start6.cn/tags/%E5%89%8D%E7%AB%AF/"},{"name":"打包","slug":"打包","permalink":"http://www.start6.cn/tags/%E6%89%93%E5%8C%85/"},{"name":"工具","slug":"工具","permalink":"http://www.start6.cn/tags/%E5%B7%A5%E5%85%B7/"},{"name":"nginx资源加载","slug":"nginx资源加载","permalink":"http://www.start6.cn/tags/nginx%E8%B5%84%E6%BA%90%E5%8A%A0%E8%BD%BD/"},{"name":"koa","slug":"koa","permalink":"http://www.start6.cn/tags/koa/"},{"name":"其他","slug":"其他","permalink":"http://www.start6.cn/tags/%E5%85%B6%E4%BB%96/"}]}