{"meta":{"title":"个人博客","subtitle":null,"description":null,"author":"周凯","url":"http://www.start6.cn","root":"/"},"posts":[{"tags":[{"name":"前端","slug":"前端","permalink":"http://www.start6.cn/tags/%E5%89%8D%E7%AB%AF/"}],"title":"angular打包错误ERROR in Illegal State issue when giving angular build","date":"2022/10/18","text":"123456789const a = [1,2,3,4,5]const result = [];for(let i=0;i&lt;a.length; i+=3) &#123; const r = a.slice(3, i+3); console.log(r); result.push(r)&#125;console.log(result, &#x27;result&#x27;)","permalink":"http://www.start6.cn/2022/10/18/javascript%E6%95%B0%E7%BB%84%E6%8B%86%E5%88%863%E4%B8%AA%E4%B8%80%E7%BB%84/","photos":[]},{"tags":[{"name":"打包","slug":"打包","permalink":"http://www.start6.cn/tags/%E6%89%93%E5%8C%85/"}],"title":"flutter 打包release部分功能无法使用","date":"2021/03/27","text":"问题分析 flutter本地测试debug打包、运行功能正常使用，但是打包release之后发现部分功能无法使用，直接卡到首屏，路由也不执行跳转 本地运行 flutter run --release --verbose 发现没有任何错误 问题猜测 打包release版本参数配置问题，混淆，或者tree shaking 部分代码没有生效? 问题解决 参考flutter中文网 android版本打包release https://flutterchina.club/android-release/ 参考 release打包闪退 https://segmentfault.com/a/1190000021610587 直接在 app/build.gradle配置 12minifyEnabled false //删除无用代码shrinkResources false //删除无用资源 重新打包问题解决","permalink":"http://www.start6.cn/2021/03/27/flutter-%E6%89%93%E5%8C%85release%E9%83%A8%E5%88%86%E5%8A%9F%E8%83%BD%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8/","photos":[]},{"tags":[{"name":"工具","slug":"工具","permalink":"http://www.start6.cn/tags/%E5%B7%A5%E5%85%B7/"}],"title":"typora 自动上传图片到gitee","date":"2021/03/25","text":"直接安装picGo软件 https://github.com/Molunerfinn/PicGo/releases/tag/v2.3.0-beta.41. 使用 node 安装 PicGo-Core12345// npm 命令执行速度过慢的话，我们可以使用一下淘宝的镜像 npm install -g picgo --registry=https://registry.npm.taobao.org// 安装完成以后测试一下是否安装成功picgo -v 2. 使用 picgo 命令安装 gitee-uploader 插件1picgo install gitee-uploader 3. 使用 picgo 命令设置 uploader1picgo set uploader 1234567891011121314151617181920C:\\Users\\Run\\Desktop&gt;picgo set uploader? Choose a(n) uploader (Use arrow keys)❯ gitee smms tcyun github qiniu imgur aliyun upyun(Move up and down to reveal more choices)? Choose a(n) uploader gitee? repo: xxxx/image? branch: master? token: 5a34fa3f348d556...? path: 2020? customPath: 年月? customUrl: https://gitee.com/xxxx/image/raw/master/[PicGo SUCCESS]: Configure config successfully! 4. 配置 Typro 上传服务设定重点是 自定义命令 的组成部分： [your node path] [your picgo path] upload 键 值 上传服务 Custom Command 自定义命令 D:\\nodejs\\node.exe D:\\nodejs\\node_global\\node_modules\\picgo\\bin\\picgo upload 注意：配置完成后可以点击 验证图片上传选项 来测试是否配置成功 5. 完整的配置文件以下是参照 PicGo-Core官方文档 的进行的配置 首先我们需要找到我们的配置文件，picgo 的默认配置文件在不同系统的目录不太一样：linux 和 macOS 均为 ~/.picgo/config.jsonwindows 则为 C:\\Users\\&#123;你的用户名&#125;\\.picgo\\config.json 123456789101112131415161718192021&#123; &quot;picBed&quot;: &#123; &quot;current&quot;: &quot;gitee&quot;, &quot;gitee&quot;: &#123; &quot;repo&quot;: &quot;xxxx/image&quot;, &quot;branch&quot;: &quot;master&quot;, &quot;token&quot;: &quot;5a34fa3f348d556...&quot;, &quot;path&quot;: &quot;2020&quot;, &quot;customPath&quot;: &quot;yearMonth&quot;, &quot;customUrl&quot;: &quot;https://gitee.com/xxxx/image/raw/master/&quot; &#125;, &quot;uploader&quot;: &quot;gitee&quot;, &quot;transformer&quot;: &quot;path&quot; &#125;, &quot;picgoPlugins&quot;: &#123; &quot;picgo-plugin-gitee-uploader&quot;: true &#125;, &quot;picgo-plugin-gitee-uploader&quot;: &#123; &quot;lastSync&quot;: &quot;2020-07-30 10:29:26&quot; &#125;&#125; 6. 解决 文件大于1M，登录后可见 的问题1按照步骤 1-6 我们确实成功地配置了一个免费好用的 Gitee图床，简单使用也没有什么问题。可是当我们上传的图片大小超过 1M 后：OMG，图片无法正常显示，在浏览器中打开图片的地址，直接跳转到 Gitee 登录界面，并且出现出现了很扎心的 文件大于1M，登录后可见 文字的提示。关键是这个文件大小限制还没有办法解决，凉凉！！！ 凉凉？不存在的！ 俗话说：办法总比困难多。我们访问 git 仓库中文件的方式并不是只有一种，更何况它只是一些静态的资源文件。所以是不是只要我们想办法配置一个简单的HTTP服务就可以了。问题迎刃而解：Gitee 官方给我们提供了一种供博客 / 门户 / 开源项目网站 / 开源项目静态效果演示用途的 Git Pages服务。 7.1 开启 Git Pages 服务 进入到阁下 Gitee 图床 所在仓库的页面，找到 服务 -&gt; Gitee Pages 无需修改任何配置。直接点击 启动按钮，等待服务启动完毕即可。 7.2 更新图片访问的路径123当我们的 图床仓库 开启 Git Pages 服务后，就会得到一个专属的网站地址，格式为：“ 个人空间地址.gitee.io/仓库名” 。例如：http://zi1.gitee.io/pic，则我们访问该图床中的静态资源文件的路径为 http://zi1.gitee.io/pic + 仓库中文件的可见路径。 比如：你的仓库中的 picture 目录下的 1.jpg 的图片文件： picture/1.jpg，则我们访问该图片的路径为：http://zi1.gitee.io/pic/picture/1.jpg 8. 开启 Git Pages 后完整的配置文件123456789101112131415161718192021&#123; &quot;picBed&quot;: &#123; &quot;current&quot;: &quot;gitee&quot;, &quot;gitee&quot;: &#123; &quot;repo&quot;: &quot;xxxx/image&quot;, &quot;branch&quot;: &quot;master&quot;, &quot;token&quot;: &quot;5a34fa3f348d556...&quot;, &quot;path&quot;: &quot;2020&quot;, &quot;customPath&quot;: &quot;yearMonth&quot;, &quot;customUrl&quot;: &quot;https://xxxx.gitee.io/image/&quot; &#125;, &quot;uploader&quot;: &quot;gitee&quot;, &quot;transformer&quot;: &quot;path&quot; &#125;, &quot;picgoPlugins&quot;: &#123; &quot;picgo-plugin-gitee-uploader&quot;: true &#125;, &quot;picgo-plugin-gitee-uploader&quot;: &#123; &quot;lastSync&quot;: &quot;2020-10-12 09:23:39&quot; &#125;&#125; D:\\nodejs\\node.exe D:\\nodejs\\node_global\\node_modules\\picgo\\bin\\picgo upload C:\\Program Files\\nodejs\\node.exe C:\\Program Files\\nodejs\\node_modules\\picgo\\bin\\picgo upload","permalink":"http://www.start6.cn/2021/03/25/typora-%E8%87%AA%E5%8A%A8%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E5%88%B0gitee/","photos":[]},{"tags":[{"name":"nginx资源加载","slug":"nginx资源加载","permalink":"http://www.start6.cn/tags/nginx%E8%B5%84%E6%BA%90%E5%8A%A0%E8%BD%BD/"}],"title":"nginx配置静态资源加载","date":"2021/03/25","text":"alias配置 1234location /img/ &#123; alias /home/; autoindex on;&#125; 访问路径是 ip:端口/img 最终去本地硬盘找的路径是 /home (系统文件) root配置 1234location /img/ &#123; root /home/; autoindex on;&#125; 访问路径是 ip:端口/img 最终去本地硬盘找的路径是 /home/img (系统文件) 参考地址 https://blog.csdn.net/a760352276/article/details/106774599","permalink":"http://www.start6.cn/2021/03/25/nginx%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E5%8A%A0%E8%BD%BD/","photos":[]},{"tags":[{"name":"工具","slug":"工具","permalink":"http://www.start6.cn/tags/%E5%B7%A5%E5%85%B7/"}],"title":"IDEA 下 SpringBoot 自动重启、热部署   spring-boot-devtools或者JRebel","date":"2021/03/24","text":"spring-boot-devtools idea设置 settings ctrl+shift+A 打开搜索Registry 点击一下 然后搜索 app，打上对钩 pom文件添加 123456&lt;!-- spring-boot-devtools --&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;!-- 表示依赖不会传递 --&gt;&lt;/dependency&gt; 插件位置配置一下 123456789101112&lt;build&gt; &lt;finalName&gt;$&#123;project.artifactId&#125;&lt;/finalName&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;configuration&gt; &lt;fork&gt;true&lt;/fork&gt; &lt;!-- 如果没有该配置，devtools不会生效 --&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt;&lt;/build&gt; 查看窗口更改代码应该直接就自动重启了JRebel方式 不用重启，直接就热更新了 现在plugins安装 jrebel 收费的，需要破解一下，白嫖的香~ 在线生成GUID地址 根据反向代理服务器地址拼接激活地址 服务器地址： https://jrebel.qekang.com/{GUID} PS：如果失效刷新GUID替换就可以！ 打开jrebel 激活面板 . 选择Connect to online licensing service . 破解成功，开始愉快地编码","permalink":"http://www.start6.cn/2021/03/24/IDEA-%E4%B8%8B-SpringBoot-%E8%87%AA%E5%8A%A8%E9%87%8D%E5%90%AF%E3%80%81%E7%83%AD%E9%83%A8%E7%BD%B2-spring-boot-devtools%E6%88%96%E8%80%85JRebel/","photos":[]},{"tags":[{"name":"工具","slug":"工具","permalink":"http://www.start6.cn/tags/%E5%B7%A5%E5%85%B7/"}],"title":"hexo,githubpage自定义域名失效","date":"2020/12/09","text":"使用 gitpage 功能将博客托管在了 github 上，并配置 CNAME 将自己的域名解析了过去，在 github 的仓库设置中开始 custom domain 的功能，这时候就可以直接使用自己的域名访问啦。 但是发现一个问题是，每次配置 custom domain 之后，再次 hexo deploy 之后，custom domain 会被重置失效。 解决方案在 hexo 生成的博客的 source 目录下新建一个 CNAME 文件，然后在这个文件中填入你的域名，这样就不会每次发布之后，gitpage 里的 custom domain 都被重置掉啦。","permalink":"http://www.start6.cn/2020/12/09/hexo,githubpage%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E5%A4%B1%E6%95%88/","photos":[]},{"tags":[{"name":"工具","slug":"工具","permalink":"http://www.start6.cn/tags/%E5%B7%A5%E5%85%B7/"}],"title":"windows安装cygwin","date":"2020/12/09","text":"下载 maven官网地址 配置环境变量 在配置之前请将JDK安装好。 添加M2_HOME:对应Maven的解压目录即可。 编辑Path环境变量： 添加 %M2_HOME%\\bin 测试，在cmd窗口输入mvn -v查看 显示如下即配置成功 为什么慢执行 mvn 各种命令的时候，默认是去 maven 官方镜像源获取需要安装的具体软件信息 默认源地址在国外，从国内访问的速度肯定比较慢 方法一： 配置只在当前项目生效 在 pom.xml 文件内添加以下配置 123456&lt;repositories&gt; &lt;repository&gt; &lt;id&gt;ali-maven&lt;/id&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt; &lt;/repository&gt;&lt;/repositories&gt; 方法二： 配置全局生效 修改 settings.xml 文件 找到 mirrors 标签，在里面加入以下内容 123456&lt;mirror&gt; &lt;id&gt;alimaven&lt;/id&gt; &lt;name&gt;aliyun maven&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;&lt;/mirror&gt; 可以在以下路径查找到 settings.xml 文件 (用户家目录)/.m2/settings.xml (maven 安装目录)/conf/settings.xml， 如果是 Mac 系统通过 brew 命令安装的，在这里： /usr/local/Cellar/maven/(版本号)/libexec/conf/settings.xml 参考地址详细配置1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;settings xmlns=&quot;http://maven.apache.org/SETTINGS/1.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;&gt; &lt;localRepository/&gt; &lt;interactiveMode/&gt; &lt;usePluginRegistry/&gt; &lt;offline/&gt; &lt;pluginGroups/&gt; &lt;servers/&gt; &lt;mirrors&gt; &lt;mirror&gt; &lt;id&gt;aliyunmaven&lt;/id&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;name&gt;阿里云公共仓库&lt;/name&gt; &lt;url&gt;https://maven.aliyun.com/repository/central&lt;/url&gt; &lt;/mirror&gt; &lt;mirror&gt; &lt;id&gt;repo1&lt;/id&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;name&gt;central repo&lt;/name&gt; &lt;url&gt;http://repo1.maven.org/maven2/&lt;/url&gt; &lt;/mirror&gt; &lt;mirror&gt; &lt;id&gt;aliyunmaven&lt;/id&gt; &lt;mirrorOf&gt;apache snapshots&lt;/mirrorOf&gt; &lt;name&gt;阿里云阿帕奇仓库&lt;/name&gt; &lt;url&gt;https://maven.aliyun.com/repository/apache-snapshots&lt;/url&gt; &lt;/mirror&gt; &lt;/mirrors&gt; &lt;proxies/&gt; &lt;activeProfiles/&gt; &lt;profiles&gt; &lt;profile&gt; &lt;repositories&gt; &lt;repository&gt; &lt;id&gt;aliyunmaven&lt;/id&gt; &lt;name&gt;aliyunmaven&lt;/name&gt; &lt;url&gt;https://maven.aliyun.com/repository/public&lt;/url&gt; &lt;layout&gt;default&lt;/layout&gt; &lt;releases&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/releases&gt; &lt;snapshots&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/snapshots&gt; &lt;/repository&gt; &lt;repository&gt; &lt;id&gt;MavenCentral&lt;/id&gt; &lt;url&gt;http://repo1.maven.org/maven2/&lt;/url&gt; &lt;/repository&gt; &lt;repository&gt; &lt;id&gt;aliyunmavenApache&lt;/id&gt; &lt;url&gt;https://maven.aliyun.com/repository/apache-snapshots&lt;/url&gt; &lt;/repository&gt; &lt;/repositories&gt; &lt;/profile&gt; &lt;/profiles&gt;&lt;/settings&gt;","permalink":"http://www.start6.cn/2020/12/09/maven%E9%85%8D%E7%BD%AE%E5%8A%A0%E9%80%9F%E9%95%9C%E5%83%8F/","photos":[]},{"tags":[{"name":"工具","slug":"工具","permalink":"http://www.start6.cn/tags/%E5%B7%A5%E5%85%B7/"}],"title":"settings.xml配置文件(最简单的可用版本)","date":"2020/12/09","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;!--Licensed to the Apache Software Foundation (ASF) under oneor more contributor license agreements. See the NOTICE filedistributed with this work for additional informationregarding copyright ownership. The ASF licenses this fileto you under the Apache License, Version 2.0 (the&quot;License&quot;); you may not use this file except in compliancewith the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0Unless required by applicable law or agreed to in writing,software distributed under the License is distributed on an&quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANYKIND, either express or implied. See the License for thespecific language governing permissions and limitationsunder the License.--&gt; &lt;!-- | This is the configuration file for Maven. It can be specified at two levels: | | 1. User Level. This settings.xml file provides configuration for a single user, | and is normally provided in $&#123;user.home&#125;/.m2/settings.xml. | | NOTE: This location can be overridden with the CLI option: | | -s /path/to/user/settings.xml | | 2. Global Level. This settings.xml file provides configuration for all Maven | users on a machine (assuming they&#x27;re all using the same Maven | installation). It&#x27;s normally provided in | $&#123;maven.conf&#125;/settings.xml. | | NOTE: This location can be overridden with the CLI option: | | -gs /path/to/global/settings.xml | | The sections in this sample file are intended to give you a running start at | getting the most out of your Maven installation. Where appropriate, the default | values (values used when the setting is not specified) are provided. | |--&gt;&lt;settings xmlns=&quot;http://maven.apache.org/SETTINGS/1.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;&gt; &lt;!-- localRepository | The path to the local repository maven will use to store artifacts. | | Default: $&#123;user.home&#125;/.m2/repository --&gt; &lt;localRepository&gt;D:\\devEnviroment\\maven\\repo&lt;/localRepository&gt; &lt;!-- interactiveMode | This will determine whether maven prompts you when it needs input. If set to false, | maven will use a sensible default value, perhaps based on some other setting, for | the parameter in question. | | Default: true &lt;interactiveMode&gt;true&lt;/interactiveMode&gt; --&gt; &lt;!-- offline | Determines whether maven should attempt to connect to the network when executing a build. | This will have an effect on artifact downloads, artifact deployment, and others. | | Default: false &lt;offline&gt;false&lt;/offline&gt; --&gt; &lt;!-- pluginGroups | This is a list of additional group identifiers that will be searched when resolving plugins by their prefix, i.e. | when invoking a command line like &quot;mvn prefix:goal&quot;. Maven will automatically add the group identifiers | &quot;org.apache.maven.plugins&quot; and &quot;org.codehaus.mojo&quot; if these are not already contained in the list. |--&gt; &lt;pluginGroups&gt; &lt;!-- pluginGroup | Specifies a further group identifier to use for plugin lookup. &lt;pluginGroup&gt;com.your.plugins&lt;/pluginGroup&gt; --&gt; &lt;/pluginGroups&gt; &lt;!-- proxies | This is a list of proxies which can be used on this machine to connect to the network. | Unless otherwise specified (by system property or command-line switch), the first proxy | specification in this list marked as active will be used. |--&gt; &lt;proxies&gt; &lt;!-- proxy | Specification for one proxy, to be used in connecting to the network. | &lt;proxy&gt; &lt;id&gt;optional&lt;/id&gt; &lt;active&gt;true&lt;/active&gt; &lt;protocol&gt;http&lt;/protocol&gt; &lt;username&gt;proxyuser&lt;/username&gt; &lt;password&gt;proxypass&lt;/password&gt; &lt;host&gt;proxy.host.net&lt;/host&gt; &lt;port&gt;80&lt;/port&gt; &lt;nonProxyHosts&gt;local.net|some.host.com&lt;/nonProxyHosts&gt; &lt;/proxy&gt; --&gt; &lt;/proxies&gt; &lt;!-- servers | This is a list of authentication profiles, keyed by the server-id used within the system. | Authentication profiles can be used whenever maven must make a connection to a remote server. |--&gt; &lt;servers&gt; &lt;!-- server | Specifies the authentication information to use when connecting to a particular server, identified by | a unique name within the system (referred to by the &#x27;id&#x27; attribute below). | | NOTE: You should either specify username/password OR privateKey/passphrase, since these pairings are | used together. | &lt;server&gt; &lt;id&gt;deploymentRepo&lt;/id&gt; &lt;username&gt;repouser&lt;/username&gt; &lt;password&gt;repopwd&lt;/password&gt; &lt;/server&gt; --&gt; &lt;!-- Another sample, using keys to authenticate. &lt;server&gt; &lt;id&gt;siteServer&lt;/id&gt; &lt;privateKey&gt;/path/to/private/key&lt;/privateKey&gt; &lt;passphrase&gt;optional; leave empty if not used.&lt;/passphrase&gt; &lt;/server&gt; --&gt; &lt;/servers&gt; &lt;!-- mirrors | This is a list of mirrors to be used in downloading artifacts from remote repositories. | | It works like this: a POM may declare a repository to use in resolving certain artifacts. | However, this repository may have problems with heavy traffic at times, so people have mirrored | it to several places. | | That repository definition will have a unique id, so we can create a mirror reference for that | repository, to be used as an alternate download site. The mirror site will be the preferred | server for that repository. |--&gt; &lt;mirrors&gt; &lt;!-- mirror | Specifies a repository mirror site to use instead of a given repository. The repository that | this mirror serves has an ID that matches the mirrorOf element of this mirror. IDs are used | for inheritance and direct lookup purposes, and must be unique across the set of mirrors. | &lt;mirror&gt; &lt;id&gt;mirrorId&lt;/id&gt; &lt;mirrorOf&gt;repositoryId&lt;/mirrorOf&gt; &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt; &lt;url&gt;http://my.repository.com/repo/path&lt;/url&gt; &lt;/mirror&gt; --&gt; &lt;mirror&gt; &lt;id&gt;nexus-aliyun&lt;/id&gt; &lt;mirrorOf&gt;*&lt;/mirrorOf&gt; &lt;name&gt;Nexus aliyun&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt; &lt;/mirror&gt; &lt;/mirrors&gt; &lt;!-- profiles | This is a list of profiles which can be activated in a variety of ways, and which can modify | the build process. Profiles provided in the settings.xml are intended to provide local machine- | specific paths and repository locations which allow the build to work in the local environment. | | For example, if you have an integration testing plugin - like cactus - that needs to know where | your Tomcat instance is installed, you can provide a variable here such that the variable is | dereferenced during the build process to configure the cactus plugin. | | As noted above, profiles can be activated in a variety of ways. One way - the activeProfiles | section of this document (settings.xml) - will be discussed later. Another way essentially | relies on the detection of a system property, either matching a particular value for the property, | or merely testing its existence. Profiles can also be activated by JDK version prefix, where a | value of &#x27;1.4&#x27; might activate a profile when the build is executed on a JDK version of &#x27;1.4.2_07&#x27;. | Finally, the list of active profiles can be specified directly from the command line. | | NOTE: For profiles defined in the settings.xml, you are restricted to specifying only artifact | repositories, plugin repositories, and free-form properties to be used as configuration | variables for plugins in the POM. | |--&gt; &lt;profiles&gt; &lt;!-- profile | Specifies a set of introductions to the build process, to be activated using one or more of the | mechanisms described above. For inheritance purposes, and to activate profiles via &lt;activatedProfiles/&gt; | or the command line, profiles have to have an ID that is unique. | | An encouraged best practice for profile identification is to use a consistent naming convention | for profiles, such as &#x27;env-dev&#x27;, &#x27;env-test&#x27;, &#x27;env-production&#x27;, &#x27;user-jdcasey&#x27;, &#x27;user-brett&#x27;, etc. | This will make it more intuitive to understand what the set of introduced profiles is attempting | to accomplish, particularly when you only have a list of profile id&#x27;s for debug. | | This profile example uses the JDK version to trigger activation, and provides a JDK-specific repo. &lt;profile&gt; &lt;id&gt;jdk-1.4&lt;/id&gt; &lt;activation&gt; &lt;jdk&gt;1.4&lt;/jdk&gt; &lt;/activation&gt; &lt;repositories&gt; &lt;repository&gt; &lt;id&gt;jdk14&lt;/id&gt; &lt;name&gt;Repository for JDK 1.4 builds&lt;/name&gt; &lt;url&gt;http://www.myhost.com/maven/jdk14&lt;/url&gt; &lt;layout&gt;default&lt;/layout&gt; &lt;snapshotPolicy&gt;always&lt;/snapshotPolicy&gt; &lt;/repository&gt; &lt;/repositories&gt; &lt;/profile&gt; --&gt; &lt;!-- | Here is another profile, activated by the system property &#x27;target-env&#x27; with a value of &#x27;dev&#x27;, | which provides a specific path to the Tomcat instance. To use this, your plugin configuration | might hypothetically look like: | | ... | &lt;plugin&gt; | &lt;groupId&gt;org.myco.myplugins&lt;/groupId&gt; | &lt;artifactId&gt;myplugin&lt;/artifactId&gt; | | &lt;configuration&gt; | &lt;tomcatLocation&gt;$&#123;tomcatPath&#125;&lt;/tomcatLocation&gt; | &lt;/configuration&gt; | &lt;/plugin&gt; | ... | | NOTE: If you just wanted to inject this configuration whenever someone set &#x27;target-env&#x27; to | anything, you could just leave off the &lt;value/&gt; inside the activation-property. | &lt;profile&gt; &lt;id&gt;env-dev&lt;/id&gt; &lt;activation&gt; &lt;property&gt; &lt;name&gt;target-env&lt;/name&gt; &lt;value&gt;dev&lt;/value&gt; &lt;/property&gt; &lt;/activation&gt; &lt;properties&gt; &lt;tomcatPath&gt;/path/to/tomcat/instance&lt;/tomcatPath&gt; &lt;/properties&gt; &lt;/profile&gt; --&gt; &lt;/profiles&gt; &lt;!-- activeProfiles | List of profiles that are active for all builds. | &lt;activeProfiles&gt; &lt;activeProfile&gt;alwaysActiveProfile&lt;/activeProfile&gt; &lt;activeProfile&gt;anotherAlwaysActiveProfile&lt;/activeProfile&gt; &lt;/activeProfiles&gt; --&gt; 以上是settings.xml文件的全部内容，直接全部复制即可用。 备注：settings.xml文件从maven的安装目录下的conf下的settings.xml文件改造而来，只做了两个地方的修改，一个是D:\\devEnviroment\\maven\\repo，这里需要改成自己的仓库地址(自己定，随意都行)，第二个修改是镜像的配置，加入的代码是下面的代码块 1234567&lt;mirror&gt; &lt;id&gt;nexus-aliyun&lt;/id&gt; &lt;mirrorOf&gt;*&lt;/mirrorOf&gt; &lt;name&gt;Nexus aliyun&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;&lt;/mirror&gt;","permalink":"http://www.start6.cn/2020/12/09/settings.xml%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/","photos":[]},{"tags":[{"name":"工具","slug":"工具","permalink":"http://www.start6.cn/tags/%E5%B7%A5%E5%85%B7/"}],"title":"windows安装cygwin","date":"2020/12/09","text":"安装地址: http://www.cygwin.com/添加到鼠标右键在当前位置打开 在cygwin中安装chere 管理员权限执行mintty,输入下列命令 chere -i -t mintty -s bash 之后,鼠标右键将会显示一个Bash Prompt Here. 如果想要修改请到HKEY_CLASSES_ROOT\\Directory\\background\\shell\\cygwin64_bash修改,也可以添加Ext ended键,按下shift才出现.","permalink":"http://www.start6.cn/2020/12/09/windows%E5%AE%89%E8%A3%85cygwin/","photos":[]},{"tags":[],"title":"家里树莓派配置","date":"2020/12/07","text":"代理工具 frp地址 https://github.com/fatedier/frp 其他代理 ngrok 配置 挂载了一块硬盘到/home/pi/hardDisk/RaspberryPi 下面 防火墙使用 ufw 开机启动服务 https://www.jianshu.com/p/f5527d73bca3 frp文件位置 /home/pi/Desktop/frp/frp 启动 systemctl start frp 开机自启动frp服务 启动遇到的问题（重启 因为是请求网络，网络没有连接就直接启动了） 解决方案: /usr/lib/systemd/system/frp.service 文件中添加 RestartSec 表示 Systemd 重启服务之前，需要等待的秒数。上面的例子设为等待42秒。 参考地址 https://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-part-two.html 软件 codeServe网盘搭建 https://github.com/cloudreve/Cloudreve 监听5212端口 配置node linux，软链接配置node,npm全局命令 sudo ln -s /usr/local/bin/node /bin/node sudo ln -s /usr/local/bin/npm /bin/npm 这样配置后，在root下和别的用户下都能使用node命令 安装软件包 sudo apt update 、 sudo apt upgrade 安装mongodb sudo apt-get install mongodb sudo systemctl enable mongodb sudo systemctl start mongodb mongo 安装redis sudo apt-get install redis-server 不能访问redis 在/etc/redis/redis.conf 里面的bind 127.0.0.1前面加上一个#,注释就可以访问了，端口是6379 linux dash 监控面板 https://github.com/NoBey/linux-dash-zh ☺ 目前启动服务： mock 网盘","permalink":"http://www.start6.cn/2020/12/07/%E5%AE%B6%E9%87%8C%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE/","photos":[]},{"tags":[{"name":"前端","slug":"前端","permalink":"http://www.start6.cn/tags/%E5%89%8D%E7%AB%AF/"}],"title":"vscode node.js应用代码调试","date":"2020/04/12","text":"vscode代码配置: 123456789101112131415161718192021&#123; // 使用 IntelliSense 了解相关属性。 // 悬停以查看现有属性的描述。 // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387 &quot;version&quot;: &quot;0.2.0&quot;, &quot;configurations&quot;: [&#123; &quot;type&quot;: &quot;node&quot;, &quot;request&quot;: &quot;launch&quot;, &quot;name&quot;: &quot;启动程序&quot;, // &quot;program&quot;: &quot;$&#123;workspaceRoot&#125;/node/index.js&quot; &quot;runtimeExecutable&quot;: &quot;nodemon&quot;, &quot;args&quot;: [&quot;$&#123;workspaceRoot&#125;/node/index.js&quot;], &quot;restart&quot;: true, &quot;protocol&quot;: &quot;inspector&quot;, &quot;sourceMaps&quot;: true, &quot;console&quot;: &quot;integratedTerminal&quot;, &quot;internalConsoleOptions&quot;: &quot;neverOpen&quot;, // 其他附加配置 &quot;runtimeArgs&quot;: [] &#125;]&#125; 参考: 地址","permalink":"http://www.start6.cn/2020/04/12/vscode-node-js%E5%BA%94%E7%94%A8%E4%BB%A3%E7%A0%81%E8%B0%83%E8%AF%95/","photos":[]},{"tags":[{"name":"前端","slug":"前端","permalink":"http://www.start6.cn/tags/%E5%89%8D%E7%AB%AF/"}],"title":"你所不知道的模块调试技巧 - npm link","date":"2020/03/23","text":"背景1.0 node 应用开发中，我们不可避免的需要使用或拆分为 npm 模块，经常遇到的一个问题是： 新开发或修改的 npm 模块，如何在项目中试验？ 为了方便示范，我们假设项目是 my-project, 需要用到一个独立的 my-utils 模块 1.1 发布一个 beta 版本 优点：你高兴就好。 缺点： 无趣+无趣+无趣，麻烦+麻烦+麻烦。 1.2 直接用相对路径安装12$ cd path/to/my-project$ npm install path/to/my-utils 优点：简单明了 缺点： 调试过程中往往需要微调，此时需要切换到 my-utils 目录修改，然后反复重新 install，很麻烦 1.3 使用软链12$ cd path/to/my-project/node_modules$ ln -s path/to/my-utils my-utils 优点：软链后，两边修改直接同步 缺点： 指令操作麻烦，不同操作系统语法不一样 2. 正解 - npm link但其实 npm 本身已经对此类情况提供了专门的 npm link 指令。 相关文档： https://docs.npmjs.com/cli/link 下面我们简单介绍下用法： 12$ cd path/to/my-project$ npm link path/to/my-utils 简单的替换一个单词，就搞定了，cool~ 如果这两种的目录不在一起，那还有一种方法： 1234567$ # 先去到模块目录，把它 link 到全局$ cd path/to/my-utils$ npm link$$ # 再去项目目录通过包名来 link$ cd path/to/my-project$ npm link my-utils 该指令还可以用来调试 node cli 模块，譬如需要本地调试我们的 egg-init，可以这样： 1234$ cd path/to/egg-init$ npm link$ # 此时全局的 egg-init 指令就已经指向你的本地开发目录了$ egg-init # 即可 想去掉 link 也很简单： 1$ npm unlink my-utils 3. 写在最后 该方法只是为了最后一步调试，模块本身的正确性，应该更多的通过单元测试来保证。 单元测试相关内容，可以参见：单元测试","permalink":"http://www.start6.cn/2020/03/23/%E4%BD%A0%E6%89%80%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E6%A8%A1%E5%9D%97%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7-npm-link/","photos":[]},{"tags":[{"name":"前端","slug":"前端","permalink":"http://www.start6.cn/tags/%E5%89%8D%E7%AB%AF/"}],"title":"RabbitMQ报错(406, \"PRECONDITION_FAILED - parameters for queue 'test_queue' in vhost '/test' not equivalent\")","date":"2020/03/18","text":"报错如下 12345678File &quot;C:\\projects\\project_name\\mq\\rabbitclient.py&quot;, line 26, in __init__self.channel.queue_declare(queue=conf.queue_name)File &quot;C:\\env\\project_name\\lib\\site-packages\\pika\\adapters\\blocking_connection.py&quot;, line 2507, in queue_declareself._flush_output(declare_ok_result.is_ready)File &quot;C:\\env\\project_name\\lib\\site-packages\\pika\\adapters\\blocking_connection.py&quot;, line 1340, in _flush_outputraise self._closing_reason # pylint: disable=E0702pika.exceptions.ChannelClosedByBroker: (406, &quot;PRECONDITION_FAILED - parameters for queue &#x27;test_queue&#x27; in vhost &#x27;/test&#x27; not equivalent&quot;) 代码如下 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253# -*- coding: utf-8 -*- import jsonimport pikaimport Config class RabbitMQClient(object): &quot;&quot;&quot; RabbitMQ Client &quot;&quot;&quot; def __init__(self): conf = Config() credentials = pika.PlainCredentials(conf.rabbit_user, conf.rabbit_password) self.conn = pika.BlockingConnection(pika.ConnectionParameters( host=conf.rabbit_ip, port=conf.rabbit_port, virtual_host=conf.vhost, credentials=credentials )) self.channel = self.conn.channel() self.exchange = conf.exchange self.routing_key = conf.routing_key self.channel.exchange_declare(exchange=self.exchange, exchange_type=&#x27;direct&#x27;, durable=True) self.channel.queue_declare(queue=conf.queue_name) self.channel.queue_bind( queue=conf.queue_name, exchange=self.exchange, routing_key=self.routing_key ) def send(self, msg): try: self.channel.basic_publish( exchange=self.exchange, routing_key=self.routing_key, body=json.dumps(msg), properties=pika.BasicProperties( delivery_mode=2 ) ) except Exception as e: raise e def close(self): self.conn.close() if __name__ == &#x27;__main__&#x27;: client = RabbitMQClient() client.send(exec_info) client.close() 定位问题 12345678我们在声明exchange的时候加了如下参数：durable=True，代表持久化；发布信息的时候加了如下参数：delivery_mode=2，代表持久化消息；我们再看声明queue的时候如何？在rabbitmq中，想要重启后不丢失消息，要为信息加delivery_mode=2参数，只为消息加持久化限制，MQ重启之后，exchange和queue全部丢失，也是不行的，所以也要为exchange和queue做持久化，都是由durable=True控制。所以，修改上述代码第26行如下：self.channel.queue_declare(queue=conf.queue_name, durable=True)再次测试便不报错了。","permalink":"http://www.start6.cn/2020/03/18/equivalent/","photos":[]},{"tags":[{"name":"koa","slug":"koa","permalink":"http://www.start6.cn/tags/koa/"}],"title":"Koa-router异步问题","date":"2020/03/12","text":"Koa-router 请求异步问题 参考: 地址 koa-router源码: 地址 通过promise实现 1234567891011121314151617router.get(&#x27;/double&#x27;, function(ctx, next) &#123; return new Promise(function(resolve, reject) &#123;//关键啊，文档中居然没有 setTimeout(function() &#123; ctx.body = &#123;message: &#x27;Hello&#x27;&#125;; //这就是我遇到的问题啊。异步中的ctx.body赋值。 resolve(next()); &#125;, 1); &#125;); &#125;, function(ctx, next) &#123; return new Promise(function(resolve, reject) &#123; setTimeout(function() &#123; ctx.body.message += &#x27; World&#x27;; resolve(next()); &#125;, 1); &#125;); &#125;, function(ctx, next) &#123; ctx.body.message += &#x27;!&#x27;; &#125;);","permalink":"http://www.start6.cn/2020/03/12/Koa-router%E5%BC%82%E6%AD%A5%E9%97%AE%E9%A2%98/","photos":[]},{"tags":[{"name":"前端","slug":"前端","permalink":"http://www.start6.cn/tags/%E5%89%8D%E7%AB%AF/"}],"title":".prettierrc文件常见配置","date":"2020/02/26","text":"12345678910111213141516171819202122232425262728293031&#123; // tab缩进大小,默认为2 &quot;tabWidth&quot;: 4, // 使用tab缩进，默认false &quot;useTabs&quot;: false, // 使用分号, 默认true &quot;semi&quot;: false, // 使用单引号, 默认false(在jsx中配置无效, 默认都是双引号) &quot;singleQuote&quot;: false, // 行尾逗号,默认none,可选 none|es5|all // es5 包括es5中的数组、对象 // all 包括函数对象等所有可选 &quot;TrailingCooma&quot;: &quot;all&quot;, // 对象中的空格 默认true // true: &#123; foo: bar &#125; // false: &#123;foo: bar&#125; &quot;bracketSpacing&quot;: true, // JSX标签闭合位置 默认false // false: &lt;div // className=&quot;&quot; // style=&#123;&#123;&#125;&#125; // &gt; // true: &lt;div // className=&quot;&quot; // style=&#123;&#123;&#125;&#125; &gt; &quot;jsxBracketSameLine&quot;: false, // 箭头函数参数括号 默认avoid 可选 avoid| always // avoid 能省略括号的时候就省略 例如x =&gt; x // always 总是有括号 &quot;arrowParens&quot;: &quot;avoid&quot;&#125;","permalink":"http://www.start6.cn/2020/02/26/prettierrc%E6%96%87%E4%BB%B6%E5%B8%B8%E8%A7%81%E9%85%8D%E7%BD%AE/","photos":[]},{"tags":[{"name":"前端","slug":"前端","permalink":"http://www.start6.cn/tags/%E5%89%8D%E7%AB%AF/"}],"title":"下载electron失败","date":"2020/02/22","text":"使用npm install electron --verbose查看具体报错原因 mac解决方案: 进入~/.npmrc 解决方案一: taobao镜像下载增加如下内容 1234registry=https://registry.npm.taobao.orgsass_binary_site=https://npm.taobao.org/mirrors/node-sass/phantomjs_cdnurl=http://npm.taobao.org/mirrors/phantomjselectron_mirror=http://npm.taobao.org/mirrors/electron/ 方案二: 进到项目目录 node_modules\\electron\\install.js 找到如下代码并且修改 1234567891011121314// downloads if not cacheddownloadArtifact(&#123; version, artifactName: &#x27;electron&#x27;, force: process.env.force_no_cache === &#x27;true&#x27;, cacheRoot: process.env.electron_config_cache, platform: process.env.npm_config_platform || process.platform, arch: process.env.npm_config_arch || process.arch, //添加如下代码， mirrorOptions:&#123; mirror: &#x27;https://npm.taobao.org/mirrors/electron/&#x27;, customDir: version &#125;&#125;).then((zipPath) =&gt; extractFile(zipPath)).catch((err) =&gt; onerror(err)) 再次用终端打开 项目目录下的 node_modules\\electron 运行 node install.js 完美解决","permalink":"http://www.start6.cn/2020/02/22/%E4%B8%8B%E8%BD%BDelectron%E5%A4%B1%E8%B4%A5/","photos":[]},{"tags":[{"name":"工具","slug":"工具","permalink":"http://www.start6.cn/tags/%E5%B7%A5%E5%85%B7/"}],"title":"angular打包错误ERROR in Illegal State issue when giving angular build","date":"2020/02/19","text":"执行 ng build –prod 错误描述: 1ERROR in Illegal State: referring to a type without a variable &#123;&quot;filePath&quot;:&quot;/home/jenkins/agent/workspace/smartcampus/frontend/smartcampus-school-pc-cn-develop/node_modules/ng-zorro-antd/table/ng-zorro-antd-table.d.ts&quot;,&quot;name&quot;:&quot;NzTrDirective&quot;,&quot;members&quot;:[]&#125; 解决方案: 文件 1tsconfig.json -&gt; fullTemplateTypeCheck-&gt;false 继续执行 ng build –prod 根据提示修改对应错误","permalink":"http://www.start6.cn/2020/02/19/angular%E6%89%93%E5%8C%85%E9%94%99%E8%AF%AFERROR-in-Illegal-State-issue-when-giving-angular-build/","photos":[]},{"tags":[{"name":"工具","slug":"工具","permalink":"http://www.start6.cn/tags/%E5%B7%A5%E5%85%B7/"}],"title":"Mac系统上安装FFmpeg","date":"2020/02/18","text":"1.下载FFmpeg先进入要存放下载文件的目录，比如要放在/Users/qinjian/Downloads/ffm目录，先执行命令： script1cd /Users/qinjian/Downloads/ffm 再执行下载的命令： script1git clone https://git.ffmpeg.org/ffmpeg.git 2.编译FFmpeg先执行下面命令进入ffmpeg目录： script1cd /Users/qinjian/Downloads/ffm/ffmpeg 再执行下面命令配置configure： script1./configure --prefix=/usr/local/ffmpeg --enable-gpl --enable-nonfree --enable-libfdk-aac --enable-libx264 --enable-libx265 --enable-filter=delogo --enable-debug --disable-optimizations --enable-libspeex --enable-videotoolbox --enable-shared --enable-pthreads --enable-version3 --enable-hardcoded-tables --cc=clang --host-cflags= --host-ldflags= 如果报错nasm/yasm not found or too old. Use --disable-x86asm for a crippled build的话，先执行下面命令安装yasm然后再执行配置configure的命令。 script1brew install yasm 如果报错ERROR: libfdk_aac not found的话，先执行下面命令安装fdk-aac然后再执行配置configure的命令。 script1brew install fdk-aac 3.安装FFmpeg执行下面命令来安装： script1234make &amp;&amp; make install// 如果安装出现下图的错误的话就用这条命令来安装sudo make &amp;&amp; sudo make install 安装成功后ffmpeg所在的目录是/usr/local/ffmpeg。 4.配置环境变量安装成功后要输入ffmpeg的全路径才能调用ffmpeg命令： script1/usr/local/ffmpeg/bin/ffmpeg -version 我们可以配置环境变量，配置环境变量后可以直接通过ffmpeg -version来调用命令。先执行下面命令打开环境变量配置文件 script1vi ~/.bash_profile 在配置文件加入ffmpeg的bin文件夹路径： script1export PATH=$PATH:/usr/local/ffmpeg/bin 然后输入:wq保存退出，再执行下面命令让刚配置的环境变量生效： script1source ~/.bash_profile 其他参考: 地址","permalink":"http://www.start6.cn/2020/02/18/Mac%E7%B3%BB%E7%BB%9F%E4%B8%8A%E5%AE%89%E8%A3%85FFmpeg/","photos":[]},{"tags":[{"name":"前端","slug":"前端","permalink":"http://www.start6.cn/tags/%E5%89%8D%E7%AB%AF/"}],"title":"WebStorm2019 Mac版破解","date":"2020/02/17","text":"参考: 地址","permalink":"http://www.start6.cn/2020/02/17/WebStorm2019-Mac%E7%89%88%E7%A0%B4%E8%A7%A3/","photos":[]},{"tags":[{"name":"工具","slug":"工具","permalink":"http://www.start6.cn/tags/%E5%B7%A5%E5%85%B7/"}],"title":"Mac 下chromium缺少Google API 密钥，因此 chromium的部分功能将无法使用","date":"2020/02/09","text":"chromium 使用登录功能需要配置 GoogleAPI 密钥，相关获取方式可以自动搜索 本文主要讲述 Mac 下配置 如果缺失无法登陆谷歌账号，Chrome 的书签同步功能无法使用； 解决方案： 第一步 1mv /Applications/Chromium.app/Contents/MacOS/Chromium /Applications/Chromium.app/Contents/MacOS/Chromium_bin 第二步vi /Applications/Chromium.app/Contents/MacOS/Chromium 123456789#!/bin/bash# Set up environment variablesexport GOOGLE_API_KEY=&quot;xxxxxxx&quot;export GOOGLE_DEFAULT_CLIENT_ID=&quot;xxxxxxx&quot;export GOOGLE_DEFAULT_CLIENT_SECRET=&quot;xxxxxx&quot;# Launch Chromium/Applications/Chromium.app/Contents/MacOS/Chromium_bin 第三步chmod +x /Applications/Chromium.app/Contents/MacOS/Chromium 完成 参考文档：https://gist.github.com/cvan/44a6d60457b20133191bd7b104f9dcc4","permalink":"http://www.start6.cn/2020/02/09/Mac-%E4%B8%8Bchromium%E7%BC%BA%E5%B0%91Google-API-%E5%AF%86%E9%92%A5%EF%BC%8C%E5%9B%A0%E6%AD%A4-chromium%E7%9A%84%E9%83%A8%E5%88%86%E5%8A%9F%E8%83%BD%E5%B0%86%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8/","photos":[]},{"tags":[{"name":"前端","slug":"前端","permalink":"http://www.start6.cn/tags/%E5%89%8D%E7%AB%AF/"}],"title":"taro多端开发","date":"2020/01/29","text":"taro 多端开发应用在线预览地址 H5 地址 egg 后台 问题总结: egg 跨域: 步骤一： # 下载 egg-cors 包 npm i egg-cors --save 步骤二： # 在plugin.js中设置开启cors exports.cors = &#123; enable: true, package: &#39;egg-cors&#39;, &#125;; 步骤三： # 在config.&#123;env&#125;.js中配置，注意配置覆盖的问题 config.security = &#123; csrf: &#123; enable: false, ignoreJSON: true &#125;, domainWhiteList: &#39;*&#39; &#125;; config.cors = &#123; origin:&#39;*&#39;, allowMethods: &#39;GET,HEAD,PUT,POST,DELETE,PATCH&#39; &#125;; 今日头条接口 首页顶部 tabs 接口: https://api3-normal-c-lf.snssdk.com/article/category/get_subscribed/v4/?iid=101398257036&amp;device_id=66877782274&amp;ac=wifi&amp;mac_address=A4%3A50%3A46%3ACD%3A3D%3AAB&amp;channel=xiaomi&amp;aid=13&amp;app_name=news_article&amp;version_code=757&amp;version_name=7.5.7&amp;device_platform=android&amp;ab_version=1251921%2C662099%2C1407070%2C668774%2C1396152%2C1445075%2C765196%2C821967%2C857803%2C660830%2C1439346%2C1397711%2C1243993%2C1434500%2C1379677%2C662176%2C1378615%2C801968%2C1419048%2C668775%2C1190524%2C1157750%2C1419597%2C1439625%2C1422304%2C1428576%2C668779%2C759656%2C1388002&amp;ab_feature=94563%2C102749&amp;ssmix=a&amp;device_type=MI+8&amp;device_brand=Xiaomi&amp;language=zh&amp;os_api=28&amp;os_version=9&amp;uuid=869832047288317&amp;openudid=c836b6236d8fcd86&amp;manifest_version_code=7571&amp;resolution=1080*2029&amp;dpi=440&amp;update_version_code=75717&amp;_rticket=1580206995760&amp;plugin=18762&amp;pos=5r_-9Onkv6e_eCopeCA7eyoLeC0JeCUfv7G_8fLz-vTp6Pn4v6esraSzrKuvrq6tqaWtr66uqqWxv_H86fTp6Pn4v6eprLOpqqqrrqWrq6uprKqlpbG__PD87d706eS_p794Kil4IDt7Kgt4LQl4JR-_sb_88Pzt0fLz-vTp6Pn4v6esraSzrKuvrq6tqaWtr66uqqWxv_zw_O3R_On06ej5-L-nqayzqaqqq66lq6urqayqpaXg&amp;rom_version=miui_v11_v11.0.4.0.peacnxm&amp;cdid=ee711002-293a-4f81-8060-8ffa05e9a76f&amp;oaid=4aea438a0899600d 首页顶部-&gt;推荐接口: https://api3-normal-c-lf.snssdk.com/api/news/feed/v88/ 开源中国接口 综合-&gt;顶部-&gt;软件: 列表: https://h5.oschina.net/apiv3/projectRecommend?size=20&amp;page=1 详情: https://h5.oschina.net/project/detail/50356 京东万象 api 接口 api 地址: 新闻","permalink":"http://www.start6.cn/2020/01/29/taro%E5%A4%9A%E7%AB%AF%E5%BC%80%E5%8F%91/","photos":[]},{"tags":[{"name":"前端","slug":"前端","permalink":"http://www.start6.cn/tags/%E5%89%8D%E7%AB%AF/"}],"title":"从0实现react","date":"2020/01/23","text":"项目地址: 项目地地址参考地址: bilibili 1231.下载nodejs2.下载脚手架: npm install create-react-app -g3.创建项目:create-react-app react-test 1.火热的0配置的打包工具parcel 地址: parcel官网 2.安装babel插件,将jsx语法转换成js对象(虚拟DOM) npm install babel-core babel-preset-env babel-plugin-transform-react-jsx --save-dev babel官网 3.组件和生命周期 4.diff算法 diff算法(待完成) 如何减少DOM更新: 我们需要找出渲染前后真正变化的部分,只更新这一部分,而对比变化，找出需要更新部分的算法称之为diff算法 对比策略: 在前面我们实现了_render方法,它能够将虚拟DOM转换成真正的DOM 但是我们需要改进它,不要让它傻乎乎的重新渲染整个DOM树,而是找出真正变化的部门进行替换。 这部门很多类似React框架实现方式都不太一样，有的框架会选择保存上次渲染的虚拟DOM，然后对比虚拟DOM前后的变化，得到一系列更新的数据，然后再将这些更新应用到真正的DOM上。 我们会选择直接对比虚拟DOM和真实DOM，这样就不需要额外保存上一次渲染的虚拟DOM，并且能够一边对比一边更新，这也是我们选择的方式。** 不管是DOM还是虚拟DOM，他们的结构都是一棵树，完全对比两棵树变化的算法时间复杂度是0(n^3),但是考虑到我们很少会跨层级移动DOM，所以我们只需要对比同一层级的变化。 只需要对比同一颜色框内的节点 总而言之，我们的diff算法有两个原则 对比当前真实的DOM和虚拟DOM，再对比过程中直接更新真实DOM 只对比同一层级的变化 5.异步的setState babel 官网","permalink":"http://www.start6.cn/2020/01/23/%E4%BB%8E0%E5%AE%9E%E7%8E%B0react/","photos":[]},{"tags":[{"name":"前端","slug":"前端","permalink":"http://www.start6.cn/tags/%E5%89%8D%E7%AB%AF/"}],"title":"Vue3.0响应式原理","date":"2020/01/22","text":"实现方法: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198// Vue3.0 响应式原理// 1). 2.0默认会递归(数据尽量扁平化) 2). 2.0数组改变length是无效的 3). 2.0对象不存在的属性不能被拦截// proxy 兼容性差 ie11不兼容let toProxy = new WeakMap(); // 弱引用映射表 es6 放置的是 原对象:代理过的对象let toRaw = new WeakMap(); // 被代理过得对象:原对象// 判断是不是对象function isObject(val) &#123; return typeof val === &quot;object&quot; &amp;&amp; val !== null;&#125;// 判断对象有没有属性function hasOwn(target, key) &#123; return target.hasOwnProperty(key);&#125;// 响应式的核心方法function reactive(target) &#123; // 创建响应式对象 return createReactiveObject(target);&#125;// 创建响应式对象function createReactiveObject(target) &#123; if (!isObject(target)) &#123; // 如果当前不是对象， 直接返回 return target; &#125; // 如果已经代理过了，就将代理过得结果返回; let proxy = toProxy.get(target); if (proxy) &#123; return proxy; &#125; // 防止代理过得对象再次被代理 if (toRaw.has(target)) &#123; return target; &#125; let baseHandler = &#123; // reflect 优点: 不会报错，而且会有返回值，会替代掉Object上的方法 // target - 源对象, key - 键值, receiver - 新的proxy代理对象 get(target, key, receiver) &#123; // 收集依赖 订阅 把当前的key和这个effect对应起来 track(target, key); // 如果目标上的 这个key变化 从新让数组中的effect执行即可 // console.log(&#x27;获取&#x27;); // proxy + reflect 反射 let result = Reflect.get(target, key, receiver); // result 是当前获取到的值 return isObject(result) ? reactive(result) : result; // 是个递归 // return target[key]; &#125;, set(target, key, value, receiver) &#123; // 怎么去 识别改属性 还是新增属性 let hasKey = hasOwn(target, key); // 判断这个属性 以前有没有 // console.log(key, value); // console.log(&#x27;设置&#x27;); let oldValue = target[key]; let res = Reflect.set(target, key, value, receiver); // 返回boolean值 if (!hasKey) &#123; trigger(target, &quot;add&quot;, key); console.log(&quot;新增属性&quot;); &#125; else if (oldValue !== value) &#123; // 表示属性更改了 trigger(target, &quot;set&quot;, key); console.log(&quot;修改属性&quot;); &#125; // 为了屏蔽无意义的修改 return res; // target[key] = value; //缺点 如果设置没成功 如果这个对象不可以被更改(writable) - 没有返回值 &#125;, deleteProperty(target, key) &#123; let res = Reflect.deleteProperty(target, key); console.log(&quot;删除&quot;); return res; &#125; &#125;; let observed = new Proxy(target, baseHandler); // es6 // 需要记录一下 如果这个对象代理过了 就不要再new了 // hash表 映射表 &#123;key=&gt;value&#125; toProxy.set(target, observed); toRaw.set(observed, target); return observed;&#125;// let obj = &#123;// name: &#x27;zk&#x27;// &#125;// 代理对象let proxy = reactive(&#123; name: &quot;zk&quot;, // 多层代理 通过get方法来判断 info: &#123; n: 10 &#125;&#125;);// reactive(proxy);// reactive(obj);// proxy.name = &#x27;改变的值zk&#x27;;// proxy.info.n = 300// console.log(proxy.name);// console.log(proxy.info.n);// delete proxy.name;// console.log(proxy.name);// proxy.a// proxy.name = &#x27;改变的值&#x27;;// delete proxy.name;// let arr = [1, 2, 3]// let proxyArr = reactive(arr)// proxyArr.push(4)// proxyArr.length = 4;// 栈 先进后出&#123;name:[effect]&#125;let activeEffectStacks = []; // 栈型结果// 数据结构// &#123;// target: &#123;// key: [fn, fn]// &#125;// &#125;let targetsMap = new WeakMap(); // 集合和hash表function track(target, key) &#123; // 如果这个target中的key变化了 我就执行数组里的方法 let effect = activeEffectStacks[activeEffectStacks.length - 1]; if (effect) &#123; // 有对应关系 才创建关联 let depsMap = targetsMap.get(target); if (!depsMap) &#123; targetsMap.set(target, (depsMap = new Map())); &#125; let deps = depsMap.get(key); if (!deps) &#123; depsMap.set(key, (deps = new Set())); &#125; if (!deps.has(effect)) &#123; deps.add(effect); &#125; // 动态创建依赖关系 &#125; // 什么都不做&#125;function trigger(target, type, key) &#123; let depsMap = targetsMap.get(target); if (depsMap) &#123; let deps = depsMap.get(key); if (deps) &#123; // 将当前key对应的effect依次执行 deps.forEach(effect =&gt; &#123; effect(); &#125;); &#125; &#125;&#125;// 响应式副作用function effect(fn) &#123; // 需要把fn这个函数变成响应式的函数 let effect = createReactiveEffect(fn); effect(); // 默认 应该先执行一次&#125;function createReactiveEffect(fn) &#123; let effect = function() &#123; // 这个就是创建的响应式的effect return run(effect, fn); // 1.让fn执行 2.把这个effect存到栈中 &#125;; return effect;&#125;function run(effect, fn) &#123; // 运行fn, 并且将effect存起来 try &#123; activeEffectStacks.push(effect); fn(); // vue2 利用了js是单线程的 &#125; finally &#123; activeEffectStacks.pop(); &#125;&#125;// 依赖收集 发布订阅let obj = reactive(&#123; name: &quot;zk&quot;&#125;);effect(() =&gt; &#123; // effect 会执行两次 默认先执行一次 之后依赖的数据发生变化了 会再次执行 console.log(obj.name, &quot;effect&quot;); // 会调用get方法&#125;);obj.name = &quot;更改哦1&quot;; 参考资料: Vue3.0 响应式原理第二节 参考资料: Vue 作者尤雨溪为你分享：Vue 3.0 进展@VueConf CN 2018 参考资料: 尤雨溪教你写 vue 高级 vue 教程 源码分析","permalink":"http://www.start6.cn/2020/01/22/Vue3-0%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86/","photos":[]},{"tags":[{"name":"前端","slug":"前端","permalink":"http://www.start6.cn/tags/%E5%89%8D%E7%AB%AF/"}],"title":"vue2.0响应式原理实现(对象,数组)","date":"2020/01/22","text":"Vue2.0 响应式原理实现(对象，数组) 具体实现: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394// Vue2.0如何实现响应式原理// 拿到原来原型上的方法let oldArrayPrototype = Array.prototype;// 创建新的实例，获取原型所有方法，以免影响原型方法。let propto = Object.create(oldArrayPrototype); // 继承[&quot;push&quot;, &quot;shift&quot;, &quot;unshift&quot;].forEach(method =&gt; &#123; propto[method] = function() &#123; // 函数劫持, 把函数进行重写 内部调用原来的方法 // call参考地址: https://blog.csdn.net/mandyucan/article/details/80820139 updateView(); // 切片编程 oldArrayPrototype[method].call(this, ...arguments); &#125;;&#125;);function observer(target) &#123; // 判断是否是对象 if (typeof target !== &quot;object&quot; || target === null) &#123; return target; &#125; // 判断是否是数组 if (Array.isArray(target)) &#123; // 拦截数组 给数组的方法进行重写 // 兼容写法 https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf Object.setPrototypeOf(target, propto); // target.__proto__ = propto &#125; // 重新定义属性，方法 for (let key in target) &#123; defineReactive(target, key, target[key]); &#125;&#125;function defineReactive(target, key, value) &#123; // 值的类型可能为对象属性，继续拦截,处理 observer(value); Object.defineProperty(target, key, &#123; get() &#123; // get进行依赖收集 return value; &#125;, set(newValue) &#123; if (newValue !== value) &#123; // 从新定义值可能为对象属性，处理 observer(value); updateView(); value = newValue; &#125; &#125; &#125;);&#125;// 数据变化可以更新视图function updateView() &#123; console.log(&quot;更新视图&quot;);&#125;// 使用Object.defineProperty 就是可以重新定义属性,给属性增加getter和setter// 问题1: 对象层级嵌套太深 递归影响性能// 问题2: 如果属性不存在，新增的属性不会是响应式的// 对象let data = &#123; name: &quot;zf&quot;, age: &#123; n: 200 &#125;&#125;;// 观察数据observer(data);data.name = &quot;jw&quot;;data.age.n = 300;// data.age = &#123;// n: 100// &#125;;// data.age.n = 400;console.log(data.name);console.log(data.age.n);// 数组let array = &#123; name: &quot;zk&quot;, age: [1, 2, 3]&#125;;observer(array);array.age.push(4); // 需要对数组上的方法进行重写 push、shift、unshift、pop、reverseconsole.log(array.age); 参考地址: vue3.0 源码实现原理第一节","permalink":"http://www.start6.cn/2020/01/22/vue2-0%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86%E5%AE%9E%E7%8E%B0-%E5%AF%B9%E8%B1%A1-%E6%95%B0%E7%BB%84/","photos":[]},{"tags":[{"name":"前端","slug":"前端","permalink":"http://www.start6.cn/tags/%E5%89%8D%E7%AB%AF/"}],"title":"【ES6基础】Map与WeakMap","date":"2020/01/22","text":"Map 常用方法示例 操作方法 内容描述 map.set(key,value) 添加键值对到映射中 map.get(key) 获取映射中某一个键的对应值 map.delete(key) 将某一键值对移除映射 Map.clear() 清空映射中所有键值对 map.entries() 返回一个以二元数组（键值对）作为元素的数组 map.has(key) 检查映射中是否包含某一键值对 map.keys() 返回一个当前映射中所有键作为元素的可迭代对象 map.values() 返回一个当前映射中所有值作为元素的可迭代对象 map.size 映射中键值对的数量 Map 与 Object 的区别 对比项 映射对象 Map Object 对象 存储键值对 √ √ 遍历所有的键值对 √ √ 检查是否包含指定的键值对 √ √ 使用字符串作为键 √ √ 使用 Symbol 作为键 √ √ 使用任意对象作为键 √ 可以很方便的得知键值对的数量 √ WeakMap 与集合类型（Set）一样，映射类型也有一个 Weak 版本的 WeakMap。WeakMap 和 WeakSet 很相似，只不过 WeakMap 的键会检查变量的引用，只要其中任意一个引用被释放，该键值对就会被删除。 以下三点是 Map 和 WeakMap 的主要区别： Map 对象的键可以是任何类型，但 WeakMap 对象中的键只能是对象引用 WeakMap 不能包含无引用的对象，否则会被自动清除出集合（垃圾回收机制) WeakSet 对象是不可枚举的，无法获取大小 下段代码示例验证了 WeakMap 的以上特性： 123456789101112131415161718192021222324252627let weakmap = new WeakMap();(function() &#123; let o = &#123; n: 1 &#125;; weakmap.set(o, &quot;A&quot;);&#125;)(); // here &#x27;o&#x27; key is garbage collectedlet s = &#123; m: 1 &#125;;weakmap.set(s, &quot;B&quot;);console.log(weakmap.get(s));console.log(...weakmap); // exception thrownweakmap.delete(s);weakmap.clear(); // Exception, no such functionlet weakmap_1 = new WeakMap([ [&#123;&#125;, 2], [&#123;&#125;, 5]]); //this worksconsole.log(weakmap_1.size); //undefined”// --------------分割线--------------const weakmap = new WeakMap();let keyObject = &#123; id: 1 &#125;;const valObject = &#123; score: 100 &#125;;weakmap.set(keyObject, valObject);console.log(weakmap.get(keyObject));//output &#123; score: 100 &#125;keyObject = null;console.log(weakmap.has(keyObject));//output false 小结今天的内容就介绍到这里，我们明白了 Map 是一个键值对的映射对象，相比 Object 来说可以使用任何键做为键值，并且能够很方便的获取键值对。WeakMap 相对于 Map 是一个不可枚举的对象，必须使用对象作为键值。如何更好的使用 Map 和 WeakMap 还需要具体结合我们实际的业务场景进行灵活使用。 参考资料: Map 与 WeakMap","permalink":"http://www.start6.cn/2020/01/22/%E3%80%90ES6%E5%9F%BA%E7%A1%80%E3%80%91Map%E4%B8%8EWeakMap/","photos":[]},{"tags":[{"name":"前端","slug":"前端","permalink":"http://www.start6.cn/tags/%E5%89%8D%E7%AB%AF/"}],"title":"直播管理","date":"2020/01/20","text":"在线教育直播系统基础结构App直播端(react-native): 技术栈:react-native、redux(状态管理)、typescript、react-navigation(导航)、react-native-storage(全局状态存储)、react-native-vector-icons(图标)、socket.io-client(实时聊天)、axios(网络请求) gitlab地址: 直播端 页面结构: android(android项目) ios(ios项目) src config(项目配置信息) model(interface接口) navigation(导航) pages(页面) auth(首次加载页面、鉴权页面、登录页面) home(直播页面) store(redux全局状态管理) utils(工具信息) request(请求处理axios) common(公共的方法) constant(常量列表) data-stored(本地数据存储) 实现功能: 登录功能, 直播功能, 可以查看客户端发送的消息,消息列表 App客户端(ionic) 技术栈: ionic、cordova、flv播放器、socket.io-client Gitlab地址: 客户端app 页面结构: src config(配置信息) guard(路由鉴权) pages(页面) login(登录页面) video(播放界面) service(服务) permissions(登录逻辑、用户信息获取) request(http请求) utils(工具类) Constant.ts(常量列表) tabs(导航) 实现功能 获取指定部门 人员的直播列表，播放直播，直播互动，可以发送消息，消息列表。 直播端后台管理(angular) 技术栈: angular、ng-alain(基于脚手架创建项目,使用了@delon扩展包)、flv播放器、rxjs gitlab地址: 后台管理 页面结构 src app config(配置信息) core(核心模块-&gt;只会被导入一次) layout(页面布局,header,footer,content) routes(页面路由) live(直播管理) sys(系统管理) department(部门管理) role(角色管理) user(用户管理) service(服务) shared(共享模块) 实现功能: 部门(增删改)、角色(增删改)、用户(增删改)、直播管理（超级管理员进去查看所有人的直播状态,在线人数、观看次数 )、部门管理员进入只能查看新增 用户、自己部门直播实时状态 Node流媒体直播服务 技术栈: node-media-server、axios、moment gitlab地址: node流媒体服务器 页面结构: app.js(流媒体入口) Auth_app.js(用户认证) Mp4_app.js(本地配置存储mp4) Multi_app(开启服务启动多核) 实现功能: 推流、拉流。 实现监控 (连接、断开，开启推送、结束推送)直播流，播放流 后台管理(egg) 技术栈: egg、egg-cors(跨域)、egg-jwt(jwt)、egg-mongoose(mongo数据库)、egg-redis(redis)、egg-socket.io(socket.io)、egg-validate(post请求参数校验) gilab地址: 后台 页面结构: app controller(请求参数处理) extend(扩展配置) helper(辅助处理相应，返回数据格式) io(socket.io) controller(处理exange(发送消息事件)) middleware(中间件,拦截sock消息处理，加入房间，在线人数，离开房间) middleware(错误处理中间件) model(mongo模型) public(静态资源) service(服务，处理和数据库交互) router(路由) config(配置) config.default.js(默认配置) plugin.js(插件配置) 实现功能: 角色管理、权限管理、用户管理、文件上传、部门管理、直播信息统计、观看人数、直播单条数据、socket.io实现p2p聊天","permalink":"http://www.start6.cn/2020/01/20/%E7%9B%B4%E6%92%AD%E7%AE%A1%E7%90%86/","photos":[]},{"tags":[{"name":"其他","slug":"其他","permalink":"http://www.start6.cn/tags/%E5%85%B6%E4%BB%96/"}],"title":"gitlab代码量统计","date":"2020/01/19","text":"使用python统计gitlab每个人的代码量汇总，按项目汇总码云地址","permalink":"http://www.start6.cn/2020/01/19/gitlab%E4%BB%A3%E7%A0%81%E9%87%8F%E7%BB%9F%E8%AE%A1/","photos":[]},{"tags":[{"name":"前端","slug":"前端","permalink":"http://www.start6.cn/tags/%E5%89%8D%E7%AB%AF/"}],"title":"(转)vscode使用编程字体","date":"2020/01/18","text":"—开源中国地址—","permalink":"http://www.start6.cn/2020/01/18/%E8%BD%AC-vscode%E4%BD%BF%E7%94%A8%E7%BC%96%E7%A8%8B%E5%AD%97%E4%BD%93/","photos":[]},{"tags":[{"name":"前端","slug":"前端","permalink":"http://www.start6.cn/tags/%E5%89%8D%E7%AB%AF/"}],"title":"个人vscode配置setting.json","date":"2020/01/14","text":"{“workbench.iconTheme”: “material-icon-theme”,“editor.fontSize”: 18,//字体文件“editor.fontFamily”: “JetBrains Mono”,“editor.formatOnSave”: true,“java.configuration.checkProjectSettingsExclusions”: false,“typescript.updateImportsOnFileMove.enabled”: “never”,“cSpell.enabledLanguageIds”: [“asciidoc”,“c”,“cpp”,“csharp”,“css”,“git-commit”,“go”,“handlebars”,“haskell”,“html”,“jade”,“java”,“javascriptreact”,“json”,“jsonc”,“latex”,“less”,“markdown”,“php”,“plaintext”,“pug”,“python”,“restructuredtext”,“rust”,“scala”,“scss”,“text”,“typescript”,“typescriptreact”,“yaml”,“yml”],“javascript.updateImportsOnFileMove.enabled”: “always”,“[typescriptreact]”: {},“editor.tabSize”: 2,“editor.detectIndentation”: false, // 全部统一成 2 空格缩进“eslint.enable”: true, //是否开启 vscode 的 eslint“editor.codeActionsOnSave”: {“source.fixAll.eslint”: true},“eslint.options”: { //指定 vscode 的 eslint 所处理的文件的后缀“extensions”: [“.js”,“.jsx”,“.ts”,“.tsx”]},“eslint.validate”: [ //确定校验准则“javascript”,“javascriptreact”,“html”,“typescript”,“typescriptreact”],“search.followSymlinks”: false,“files.exclude”: {“/.git”: true,“/.svn”: true,“/.hg”: true,“/CVS”: true,“/.DS_Store”: true,“/tmp”: true,// “/node_modules”: true,“/bower_components”: true,// “/dist”: true},“files.watcherExclude”: {“/.git/objects/“: true,“/.git/subtree-cache/“: true,// “/node_modules/“: true,“/tmp/“: true,“/bower_components/“: true,“/dist/**“: true},“explorer.confirmDelete”: false}","permalink":"http://www.start6.cn/2020/01/14/%E4%B8%AA%E4%BA%BAvscode%E9%85%8D%E7%BD%AEsetting-json/","photos":[]},{"tags":[{"name":"前端","slug":"前端","permalink":"http://www.start6.cn/tags/%E5%89%8D%E7%AB%AF/"}],"title":"code-push","date":"2020/01/14","text":"code-push 常用命令安装: npm install -g code-push-cli注册账号: code-push register登陆: code-push login注销: code-push logout添加项目: code-push app add [app 名称]删除项目: code-push app remove [app 名称]列出账号下的所有项目: code-push app list显示登陆的 token: code-push access-key ls删除某个 access-key: code-push access-key rm 添加协作人员：code-push collaborator add next@126.com部署一个环境: code-push deployment add 删除部署: code-push deployment rm 列出应用的部署: code-push deployment ls 查询部署环境的 key: code-push de ployment ls -k查看部署的历史版本信息: code-push deployment history 重命名一个部署: code-push deployment rename 打包 bundle 包 react-native bundle –entry-file index.js –bundle-output ./bundle/android/index.android.bundle –platform android –assets-dest ./bundle/android –dev false发布更新版本 (直接推送到生产环境) code-push release-react newDemo android -t 1.0.0 –dev false –d Production –des “这是第一个” -m true2.cordova 常用命令// 发布 Staging 版本$ code-push release-cordova ios // 发布 Production 版本$ code-push release-cordova ios -d Production // 查看已发布的版本$ code-push deployment ls -k //给 app 在热更新服务器上创建应用code-push app add //删除应用code-push app rm //查看热更新服务器上有哪些应用code-push app list //发布应用code-push release-cordova [options]Options 参数:–deploymentName, -d ..指定部署的类型.默认”Staging”,可以选择”Production”或其他 自定义类型–description, –des ..添加描述–mandatory, -m …….指定此版本是否为强制更新版本例 1:发布更新code-push release-cordova ionic2_tabs_android android –des “”例 2:部署”Production”状态的更新,即生产环境的热更新部署使用这句命令code-push release-cordova ionic2_tabs_android android -d “Production” –des “”注意:一般生产环境的 app 是压缩过的,所以在发布正式环境热更新之前,先执行”ionic build –prod”压缩代码例 3:部署 ios 应用的更新code-push release-cordova ionic2_tabs_ios ios –des “”例 4:添加-m 参数强制更新,code-push 插件从服务端下载完代码,会立即自动重启 appcode-push release-cordova ionic2_tabs_android android -m –des “” //查看部署状态code-push deployment list 例 1:code-push deployment list ionic2_tabs_android例 2:查看部署状态及 key 值,忘记 key 就这样找code-push deployment list ionic2_tabs_android -k //清空部署记录code-push deployment clear 如:清空 Staging 状态的部署记录code-push deployment clear ionic2_tabs_android Staging //添加部署状态,默认只有”Staging”和”Production”两中状态code-push deployment add [deploymentName] //删除自定义的部署状态code-push deployment rm","permalink":"http://www.start6.cn/2020/01/14/code-push/","photos":[]},{"tags":[{"name":"前端","slug":"前端","permalink":"http://www.start6.cn/tags/%E5%89%8D%E7%AB%AF/"}],"title":"Vue3.0源码解读","date":"2020/01/14","text":"Vue3.0 源码解读 参考资料 Es6 系列之 Proxy-简书 Vue 3.0 源码逐行解析（一）：响应式模块（1） vue-cli 源码分析","permalink":"http://www.start6.cn/2020/01/14/Vue3-0%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/","photos":[]},{"tags":[],"title":"树莓派(宝塔、frp)","date":"2020/01/13","text":"记录 树莓派安装frp客户端 地址:1.参考地址2.启动报错参考 frp 后台启动: 地址1地址2 树莓派安装宝塔 宝塔面板5.9版本linux系统安装命令(Ubuntu/Deepin) 1wget -O install.sh http://download.bt.cn/install/install-ubuntu.sh &amp;&amp; sudo bash install.sh 地址: 参考地址 树莓派关在移动硬盘地址: 参考地址","permalink":"http://www.start6.cn/2020/01/13/%E6%A0%91%E8%8E%93%E6%B4%BE-%E5%AE%9D%E5%A1%94%E3%80%81frp/","photos":[]},{"tags":[],"title":"ionic请求jira接口","date":"2020/01/12","text":"记录 背景: jira项目 手机端app展示、统计项目信息。接口请求采用cookie、session认证方式 手机端: 采用angular+ionic 搭建app、接口请求采用httpClient。 遇到的问题: 手机端访问时候 跨域, cookie无法携带到请求头。 解决方案: 1.登录成功存储本地cookie(必须设置路径为/) 12// 设置登录的cooikedocument.cookie = `JSESSIONID=25911C87CD11A87ADE4874F11679A2E4;path=/`; 2.请求接口时设置 12const headers = [&#123; &#x27;Content-Type&#x27;: &#x27;application/json&#x27; &#125;]const headerOptions = &#123;headers,withCredentials:true&#125; 参考链接: js cookie 的路径以及 Cookie 域 cookie跨域问题","permalink":"http://www.start6.cn/2020/01/12/ionic%E8%AF%B7%E6%B1%82jira%E6%8E%A5%E5%8F%A3/","photos":[]},{"tags":[],"title":"app分发平台","date":"2020/01/11","text":"记录 为方便公司内部 app 版本统一管理,根据开源项目本地部署: 开源地址 采坑记录 1.安装依赖报错 12345internal/util/inspect.js:31const types = internalBinding(&#x27;types&#x27;);ReferenceError: internalBinding is not defined 错误原因：这个问题是我将 node 版本升级至 v10.15.0，npm 升级至 6.4.1 后出现的，在此之前，我的 node 版本是 8+，没有出现这个问题。 解决方案: 升级下 native 这个插件的版本即可 ​ npm install natives@1.1.6 错误原地址:地址 2.pm2 启动后台服务报错 解决方案: 在 server 根目录新增app.js，添加如下内容 123require(&quot;babel-register&quot;);require(&quot;babel-polyfill&quot;);require(&quot;./index.js&quot;); 然后再执行pm2 start app.js即可 解决方案原地址:地址 3.nginx 配置 upload 文件下载 404 正确配置: 12345678910111213141516171819202122location / &#123; try_files $uri $uri/ @router; index index.html; root /www/wwwroot/app.start6.cn/dist; &#125; location /upload &#123; #该root目录为根目录下config.json文件里dir目录 上传的apk和ipa文件当作静态文件处理 alias /apk/upload; &#125; location @router &#123; # vue的router配置 rewrite ^.*$ /index.html last; &#125; location /api/ &#123; #把以api打头的接口转发给后端server proxy_pass http://127.0.0.1:9898; #这里端口修改为后端服务运行的端口 proxy_set_header Host $host; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; &#125; client_max_body_size 208M; #最大上传的ipa/apk文件大小","permalink":"http://www.start6.cn/2020/01/11/app%E5%88%86%E5%8F%91%E5%B9%B3%E5%8F%B0/","photos":[]},{"tags":[],"title":"小程序个人博客发布啦","date":"2019/10/04","text":"##技术栈 前端-&gt; taro taro-ui mp-colorui typescript graphql hooks 后端-&gt; nestjs mongodb graphql gitee地址: 小程序哦在线demo: 待制作","permalink":"http://www.start6.cn/2019/10/04/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%8F%91%E5%B8%83%E5%95%A6/","photos":[]},{"tags":[],"title":"动态表单实现","date":"2019/10/04","text":"angular动态表单地址: angular表单 vue动态表单地址: vue表单","permalink":"http://www.start6.cn/2019/10/04/%E5%8A%A8%E6%80%81%E8%A1%A8%E5%8D%95%E5%AE%9E%E7%8E%B0/","photos":[]}],"categories":[],"tags":[{"name":"前端","slug":"前端","permalink":"http://www.start6.cn/tags/%E5%89%8D%E7%AB%AF/"},{"name":"打包","slug":"打包","permalink":"http://www.start6.cn/tags/%E6%89%93%E5%8C%85/"},{"name":"工具","slug":"工具","permalink":"http://www.start6.cn/tags/%E5%B7%A5%E5%85%B7/"},{"name":"nginx资源加载","slug":"nginx资源加载","permalink":"http://www.start6.cn/tags/nginx%E8%B5%84%E6%BA%90%E5%8A%A0%E8%BD%BD/"},{"name":"koa","slug":"koa","permalink":"http://www.start6.cn/tags/koa/"},{"name":"其他","slug":"其他","permalink":"http://www.start6.cn/tags/%E5%85%B6%E4%BB%96/"}]}